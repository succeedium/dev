{
    "Name": "}tp_update_state_cube",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pGuid,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalSubset, cShadowApprovalDim );\r\nEndIf;\r\n\r\n#*** Log Parameters\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW,'\\Y \\M \\d - \\h:\\i:\\s'), 'Parameters:', pGuid, pAppId,  pControl);\r\nEndIf;\r\n\r\n#*** Check application\r\n\r\ncApplicationsDim = cControlPrefix |  'tp_applications';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pGuid, \r\n'pProcess', cTM1Process,\r\n'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n'pErrorDetails', cApplicationsDim, \r\n'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, cApplicationsDim | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pGuid, \r\n'pProcess', cTM1Process,\r\n'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n'pErrorDetails', pAppId, \r\n'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, pAppId | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nEndIf;\r\n\r\n#*** Check State cube\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\nExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n'pGuid', pGuid, \r\n'pProcess', cTM1Process,\r\n'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n'pErrorDetails', cStateCube, \r\n'pControl', pControl);\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Cube ' | cStateCube | ' does not exist.');\r\nEndIf;\r\nProcessError;\r\nEndIf;\r\n\r\n\r\n#***Check invalid node states\r\n\r\n#***States\r\ncNotStarted= '0';\r\ncIncomplete = '1';\r\ncWorkInProgress = '2';\r\ncReady = '3';\r\ncLocked = '4';\r\n\r\nvLevel = 0;\r\nIf (pUpdateLeafState @= 'N');\r\nvLevel = 1;\r\nEndif;\r\n\r\nvSubset = 'nodes_in_level_' | pGuid;\r\nvReachTopLevel = 'F';\r\nWHILE (vReachTopLevel @= 'F');\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\n\tENDIF;\r\n\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL( TM1SUBSETALL( [' | cShadowApprovalDim | '] ), ' | NumberToString(vLevel) | '), \r\n\t\t[' | cShadowApprovalDim | '].[' | cApprovalSubset | '])}';\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Mdx to get nodes with level ' | numberToString(vLevel) | ' : ' | vMDX);\r\n\tENDIF;\r\n\tsubsetCreateByMdx(vSubset, vMDX, cShadowApprovalDim);\r\n\tvSubsetSize = SubsetGetSize(cShadowApprovalDim, vSubset);\r\n\r\n\tIF (vSubsetSize >0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pGuid,\r\n\t\t\t'pDim', cShadowApprovalDim, 'pSubset', vSubset);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIF;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'subset Size: ' | numbertostring(vSubsetSize) | ' for level: ' | NumberToString(vLevel));\r\n\tENDIF;\r\n\r\n\tIF (vSubsetSize = 0);\r\n\r\n\t\tIF (vLevel >= 20);\r\n\t\t\tvReachTopLevel = 'T';\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, ' Reach top level: ' | NumberToString(vLevel));\r\n\t\t\tENDIF;\r\n\t\tENDIF;\r\n\tELSE;\r\n\t\tvReachTopLevel = 'F';\r\n\t\tlooper =vSubsetSize;\r\n\t\tWHILE (looper >0);\r\n\t\t\tvNode = SubsetGetElementName (cShadowApprovalDim, vSubset, looper);\r\n\t\t\tvState = CellGetS(cStateCube, vNode, 'State');\r\n\r\n\t\t\tIf (vNode @<> '');\r\n\t\t\t\tif (CellIsUpdateable(cStateCube, vNode, 'State') = 0);\r\n\t\t\t\t\tvDetail=INSRT('State',')',1);\r\n\t\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIF (vNode @<>'' & vLevel = 0 & DTYPE(cShadowApprovalDim, vNode) @<> 'C');\r\n\r\n\t\t\t\tIF (vState @= '');\r\n\t\t\t\t\tCellPutS('0', cStateCube, vNode, 'State');\r\n\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Leaf level node: ' | vNode | ' can not have state ' | vState | '. Change state from null to NotStarted 0' );\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\t\tIF (vState @= cReady % vState @= cIncomplete);\r\n\t\t\t\t\tCellPutS('2', cStateCube, vNode, 'State');\r\n\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Leaf level node: ' | vNode | ' can not have state ' | vState | '. Change state to WorkInProgress 2' );\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\tELSEIF (vNode @<>'' & vLevel >0 & DTYPE(cShadowApprovalDim, vNode) @= 'C');\r\n\t\t\t\tIF (vState @= '');\r\n\t\t\t\t\tCellPutS('0', cStateCube, vNode, 'State');\r\n\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Leaf level node: ' | vNode | ' can not have state ' | vState | '. Change state from null to NotStarted 0' );\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\t\tvChildrenSize = ELCOMPN(cShadowApprovalDim, vNode);\r\n\r\n\t\t\t\tvNotStartedCount = 0;\r\n\t\t\t\tvIncompleteCount = 0;\r\n\t\t\t\tvInProgressCount =0;\r\n\t\t\t\tvReadyCount =0;\r\n\t\t\t\tvLockedCount =0;\r\n\r\n\r\n\t\t\t\tlooper2 =1;\r\n\t\t\t\tWhile (looper2<=vChildrenSize);\r\n\t\t\t\t\tvChild = ELCOMP(cShadowApprovalDim, vNode, looper2);\r\n\t\t\t\t\tvChildState = CellGetS(cStateCube, vChild, 'State');\r\n\t\t\t\t\tIF (vChildState @= '0');\r\n\t\t\t\t\t\tvNotStartedCount = vNotStartedCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @= '1');\r\n\t\t\t\t\t\tvIncompleteCount = vIncompleteCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @= '2');\r\n\t\t\t\t\t\tvInProgressCount = vInProgressCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @='3');\r\n\t\t\t\t\t\tvReadyCount = vReadyCount +1;\r\n\t\t\t\t\tELSEIF (vChildState @= '4');\r\n\t\t\t\t\t\tvLockedCount = vLockedCount +1;\r\n\t\t\t\t\tENDIF;\r\n\t\t\t\t\tlooper2 = looper2+1;\r\n\t\t\t\tEND;\r\n\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'NotStartedCount: ' | NumberToString(vNotStartedCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'InCompleteCount: ' | NumberToString(vIncompleteCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'InProgressCount: ' | NumberToString(vInProgressCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'ReadyCount: ' | NumberToString(vReadyCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'LockedCount: ' | NumberToString(vLockedCount));\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Current State: ' | vState);\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Current Node: ' | vNode);\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\t\tvNewState = '';\r\n\t\t\t\t#***NotStarted for consolidated node: If all children are NotStarted, parent should be NotStarted\r\n\t\t\t\tIF (vNotStartedCount >0 & vInProgressCount =0 & vLockedCount =0 & vReadyCount =0 & vInCompleteCount =0);\r\n\t\t\t\t\tvNewState = cNotStarted;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to NotStarted 0.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#***Incomplete for consolidated node: At least one of the items that makes up this e.List item\r\n\t\t\t\t#has not started or Incomplete and at least one other item has started\r\n\t\t\t\tELSEIF ((vNotStartedCount) >0 & (vInProgressCount >0 % vLockedCount >0  % vReadyCount>0 % vIncompleteCount >0));\r\n\t\t\t\t\tvNewState = cIncomplete;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to Incomplete 1.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#***#***Incomplete for consolidated node: At least one of the items that makes up this e.List item\r\n\t\t\t\t#has not started or Incomplete and at least one other item has started\r\n\t\t\t\tELSEIF (vIncompleteCount >0);\r\n\t\t\t\t\tvNewState = cIncomplete;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to Incomplete 1.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#***WorkInProgress for consolidated node: All items making up this e.List item have started (nothing notStarted or incomplete)\r\n\t\t\t\t#at least one item has not been submitted\r\n\t\t\t\tELSEIF ( vNotStartedCount =0 & vIncompleteCount=0 & (vInProgressCount +  vReadyCount) >0);\r\n\t\t\t\t\tvNewState = cWorkInProgress;\r\n\t\t\t\t\tIF (vNewState @<> vState);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to WorkInProgress 2.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\r\n\t\t\t\t#Ready for consolidated node: All items making up this e.List item have been submitted\r\n\t\t\t\tELSEIF (vLockedCount >0 & vInProgressCount =0 & vNotStartedCount =0 & vReadyCount =0 & vIncompleteCount =0);\r\n\t\t\t\t\tvNewState = cReady;\r\n\t\t\t\t\tIF (vState @<> cReady & vState @<> cLocked);\r\n\t\t\t\t\t\tCellPutS(vNewState, cStateCube, vNode, 'State');\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, vNode | ' state is changed from ' | vState | ' to Ready 3.' );\r\n\t\t\t\t\t\tENDIF;\r\n\t\t\t\t\tENDIF;\r\n\t\t\t\tENDIF;\r\n\r\n\t\t\tENDIF;\r\n\r\n\t\t\tlooper = looper -1;\r\n\t\tEND;\r\n\r\n\tENDIF;\r\n\r\n\tvLevel = vLevel +1;\r\nEND;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\nSubsetDestroy(cShadowApprovalDim, vSubset);\r\nENDIF;\r\n\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pGuid",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pUpdateLeafState",
            "Prompt": "",
            "Value": "Y",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_update_state_cube"
    }
}