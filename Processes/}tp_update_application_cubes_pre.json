{
    "Name": "}tp_update_application_cubes_pre",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters', pExecutionId, pAppId);\r\nEndIf;\r\n\r\n\r\n#*** Get application info\r\ncApprovalDIM = ATTRS('}tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS('}tp_applications', pAppId, 'ApprovalSubset');\r\ncAppActive = ATTRS('}tp_applications', pAppId, 'IsActive'); \r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionDimOld = ATTRS('}tp_applications', pAppId, 'VersionDimensionOld');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\ncVersionSlicesRead =ATTRS('}tp_applications', pAppId, 'VersionSlicesRead');\r\n\r\n#*** Check if a new version dimension is added.\r\nseIsNewVersionDimensionAdded = 'N';\r\nIF (cVersionDimOld @='' & cVersionDim @<> '');\r\n\tseIsNewVersionDimensionAdded = 'Y';\r\nEndif;\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Version dimension is added in redeployment');\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\n#*** Export security overlay cube data, destroy and recreate security overlay cubes\r\nNumericGlobalVariable('gDim_1IndexInCube');\r\nNumericGlobalVariable('gDim_2IndexInCube');\r\nNumericGlobalVariable('gDim_3IndexInCube');\r\nStringGlobalVariable('gSecurityOverlayTokenString');\r\nStringGlobalVariable('gImportPattern');\r\n\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\tcApplicationCubesCube = '}tp_application_cubes';\r\n\tsCubesDim = '}Cubes';\r\n\tcCubesDimSize = DIMSIZ(sCubesDim);\r\n\tvIndex = 1;\r\n\r\n\tWhile (vIndex <= cCubesDimSize);\r\n\t\tvCubeName = DIMNM(sCubesDim, vIndex);\r\n\t\tvFlagCube = CellGetS(cApplicationCubesCube, pAppId, vCubeName);\r\n\t    \tvSecurityOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\r\n\t\tIf (vFlagCube @= 'A' );\r\n\t\t\tIf (CubeExists(vSecurityOverlayCube) = 0);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_util_is_dim_in_cube', 'pCube', vCubeName, 'pDim_1', cVersionDim, 'pDim_2', cApprovalDIM);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tvVersionIndexInCube = gDim_1IndexInCube;\r\n\t\t\tvApprovalIndexInCube = gDim_2IndexInCube;\r\n\t\t\tvSecurityOverlayTokenString = gSecurityOverlayTokenString;\r\n\t\t\t\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_util_is_dim_in_cube', 'pCube', vSecurityOverlayCube, 'pDim_1', cVersionDim);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tvVersionIndexInSecurityOverlayCube = gDim_1IndexInCube;\r\n\t\t\t\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t'cube: ' | vCubeName, 'dim: ' | cVersionDim, 'index in cube: ' | NumberToString(vVersionIndexInCube), 'index in security overlay cube: ' | NumberToString(vVersionIndexInSecurityOverlayCube));\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tIf (vVersionIndexInCube > 0 & vVersionIndexInSecurityOverlayCube = 0);\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_util_export_cube', 'pExecutionId', pExecutionId | vCubeName,\r\n\t\t\t\t\t'pCube', vSecurityOverlayCube, 'pBlob', vSecurityOverlayCube | '_' | pExecutionId, 'pAlt', 'Y');\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tSecurityOverlayDestroyGlobalDefault(vCubeName);\r\n\t\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_deploy_create_security_overlay_cube', 'pExecutionId',pExecutionId, 'pAppId', pAppId, 'pCubeName',vCubeName );\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncTM1Log = cEpilogLog;\r\n\r\n\r\n#*** Import security overlay cube data.\r\nIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\r\n\tcCubesDimSize = DIMSIZ(sCubesDim);\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cCubesDimSize);\r\n\t\tvCubeName = DIMNM(sCubesDim, vIndex);\r\n\t\tvFlagCube = CellGetS(cApplicationCubesCube, pAppId, vCubeName);\r\n\t\t\r\n\t\tIf (vFlagCube @= 'A' );\r\n\t\t\tvSecurityOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\r\n\t\t\tIf (CubeExists(vSecurityOverlayCube) = 0);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\tvSecurityOverlayBlb = vSecurityOverlayCube | '_' | pExecutionId | '.blb';\r\n\t\t\tIf (FileExists(vSecurityOverlayBlb) = 1);\r\n\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t'Find security overlay import file: ' | vSecurityOverlayBlb);\r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_util_is_dim_in_cube', 'pCube', vSecurityOverlayCube, 'pDim_1', cVersionDim);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvVersionIndexInSecurityOverlayCube = gDim_1IndexInCube;\r\n\t\t\t\tvImportPatternForSecurityOverlayCube = gImportPattern;\r\n\t\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t'Version index in security overlay cube: ' | NumberToString(vVersionIndexInSecurityOverlayCube),\r\n\t\t\t\t\t\t'Import pattern for security overlay cube: ' | vImportPatternForSecurityOverlayCube);\r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_util_import_cube', 'pExecutionId', pExecutionId | vCubeName,\r\n\t\t\t\t\t'pCube', vSecurityOverlayCube, 'pSourceFile', vSecurityOverlayBlb, 'pSlicer', vImportPatternForSecurityOverlayCube);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tElse;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t'Cannot find security overlay import file: ' | vSecurityOverlayBlb);\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_update_application_cubes_pre"
    }
}