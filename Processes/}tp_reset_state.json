{
    "Name": "}tp_reset_state",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Parameters:', TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), pExecutionId, pAppId, pControl);\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check application dimension');\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cApplicationsDim,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check application id', pAppId);\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t'pErrorDetails', cApplicationsDim | ', ' | pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Get Approval dimension and subset');\r\nEndIf;\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\n\r\n#***\r\nIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '');\r\n\t#create version subset that contains this version only\r\n\tvVersionSubset = 'temp_app_version' | pAppId;\r\n\tIF (SubsetExists(cVersionDim, vVersionSubset)>0);\r\n\t\tsubsetDestroy(cVersionDim, vVersionSubset);\r\n\tEndif;\r\n\tSubsetCreate(cVersionDim, vVersionSubset);\r\n\tversionSeparater = '|';\r\n\tvPosVersion = 0;\r\n\tvStringToScan = cVersionSlicesWrite;\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\tWhile (vPosVersion >0);\r\n\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\tIF (DIMIX(cVersionDim, vVersionSlice) >0);\r\n\t\t\tSubsetElementInsert(cVersionDim, vVersionSubset, vVersionSlice, 1);\r\n\t\tElse;\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\tProcessError;\t\t\t\r\n\t\tEndif;\r\n\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tEnd;\r\n\r\nEndif;\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check state cube');\r\nEndIf;\r\n\r\nIf (cApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\nElse;\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\ncState = 'State';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncCurrentOwner = 'CurrentOwner';\r\ncWorkInProgress = '2';\r\n\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\t\r\n# remove existing reservations for the application\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Revoke all owners');\r\nEndIf;\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_release_all', 'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, 'pControl', pControl);\r\n\t\t\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\t\r\nIf (cApprovalDim @= '');\r\n\t\r\n\tcApplicationsDim = cControlPrefix | 'tp_applications';\r\n\tcApplicationSubset = 'tp_temp_reset_application_subset_' | pExecutionId;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Application reset subset : ' | cApplicationSubset);\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out application values on State cube');\r\n\tEndIf;\r\n\t\r\n\tIf (SubsetExists(cApplicationsDim, cApplicationSubset) = 1);\r\n\t\tSubsetDestroy(cApplicationsDim, cApplicationSubset);\r\n\tEndIf;\t\r\n\tSubsetCreate(cApplicationsDim, cApplicationSubset);\r\n\tSubsetElementInsert(cApplicationsDim, cApplicationSubset, pAppId, 0);\r\n\t\t\r\n\tcApplicationView = 'tp_temp_reset_application_view_' | pExecutionId;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Application reset view : ' | cApplicationView);\r\n\tEndIf;\r\n\tIf (ViewExists(cStateCube, cApplicationView) = 1);\r\n\t\tViewDestroy(cStateCube, cApplicationView);\t\r\n\tEndIf;\t\r\n\tViewCreate(cStateCube, cApplicationView);\r\n\tViewColumnDimensionSet(cStateCube, cApplicationView, cNodeInfoDim, 1);\r\n\tViewRowDimensionSet(cStateCube, cApplicationView, cApplicationsDim, 1);\r\n\tViewSubsetAssign(cStateCube, cApplicationView, cApplicationsDim, cApplicationSubset);\t\r\n\tViewZeroOut(cStateCube, cApplicationView);\r\n\tViewDestroy(cStateCube, cApplicationView);\t\r\n\tSubsetDestroy(cApplicationsDim, cApplicationSubset);\r\nElse;\r\n\t\r\n\t#*** \r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out all view on State cube');\r\n\tEndIf;\r\n\tcAllView = 'All_reset_' | pAppId;\r\n\tIf (ViewExists(cStateCube, cAllView) = 1);\r\n\t\tViewDestroy(cStateCube, cAllView);\t\r\n\tEndIf;\t\r\n\tViewCreate(cStateCube, cAllView);\r\n\tViewColumnDimensionSet(cStateCube, cAllView, cNodeInfoDim, 1);\r\n\tViewSubsetAssign(cStateCube, cAllView, cShadowApprovalDim, cApprovalSubset);\r\n\tViewZeroOut(cStateCube, cAllView);\r\n\tViewDestroy(cStateCube, cAllView);\r\n\r\n\t#***\r\n\tcApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\t\r\n\ttotalCubes = DIMSIZ('}Cubes');\r\n\tindexCube = totalCubes;\r\n\t\r\n\t#ZeroOut Global overlay cubes\r\n\tWhile (indexCube >= 1);\r\n\t\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\t\r\n\t\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\t\tcOverlayCube = '}SecurityOverlayGlobal_' | cCubeName;\r\n\t\tcOverlayMeasureDim = '}SecurityOverlay';\r\n\t\tIf (cIsAppCube @= 'A' );\r\n\t\t\t#***check whether overlay cube contains version dimension\r\n\t\t\tvDimIndex =1;\r\n\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tvFoundVersion = 'F';\r\n\t\t\tWhile (vDimension @<> '');\r\n\t\t\t\tIF (vDimension @= cVersionDim);\r\n\t\t\t\t\tvFoundVersion = 'T';\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tEnd;\r\n\r\n\t\t\tIF (CubeExists(cOverlayCube) >0);\r\n\t\t\t\t#*** reset secruity overlay cubes\r\n\t\t\t\tcAllView = 'All';\r\n\t\t\t\tIf (ViewExists(cOverlayCube, cAllView) = 1);\r\n\t\t\t\t\tViewDestroy(cOverlayCube, cAllView);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tViewCreate(cOverlayCube, cAllView);\r\n\t\t\t\tViewColumnDimensionSet(cOverlayCube, cAllView, cOverlayMeasureDim, 1);\r\n\t\t\t\tViewRowDimensionSet(cOverlayCube, cAllView, cApprovalDim, 1);\r\n\t\t\t\tIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '' & vFoundVersion @= 'T' );\r\n\t\t\t\t\tViewTitleDimensionSet(cOverlayCube, cAllView, cVersionDim);\r\n\t\t\t\t\tViewSubsetAssign(cOverlayCube, cAllView, cVersionDim, vVersionSubset);\r\n\t\t\t\tEndif;\r\n\t\t\t\tViewZeroOut(cOverlayCube, cAllView);\r\n\t\t\t\tViewDestroy(cOverlayCube, cAllView);\r\n\t\t\tEndif;\r\n\r\n\r\n\t\tEndIf;\r\n\t\t\r\n\t\tindexCube = indexCube - 1;\r\n\tEnd;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set node state to Not Started if the node is in the subset');\r\n\tEndIf;\r\n\t\r\n\t#***\r\n\t\r\n\tcApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set state cube value for state if the node is in the subset');\r\n\tEndIf;\r\n\t\r\n\tcDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\n\tIf (cDisplayUserName @= '');\r\n\t\tcDisplayUserName = TM1User;\r\n\tEndIf;\r\n\t\t\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cApprovalDimSize);\r\n\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\r\n\t\tvValue = CellGetS(cStateCube, vElement, 'State');\r\n\t\tIf (vValue @= '');\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, cState) = 0);\r\n\t\t\t\tvDetail=INSRT(cState,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('0', cStateCube, vElement, cState);\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, cStateChangeUser) = 0);\r\n\t\t\t\tvDetail=INSRT(cStateChangeUser,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS(cDisplayUserName, cStateCube, vElement, cStateChangeDate);\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, cStateChangeDate) = 0);\r\n\t\t\t\tvDetail=INSRT(cStateChangeDate,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS(pTime, cStateCube, vElement, cStateChangeDate);\r\n\t\tEndIf;\r\n\t\t\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\t\r\n\t#***\r\n\t\r\nEndIf;\r\n\r\n#***\r\nIF (SubsetExists(cVersionDim, vVersionSubset) >0);\r\n\tSubsetDestroy(cVersionDim, vVersionSubset);\r\nEndif;\r\n\r\n#***\r\n#Truncate the error dimension\r\nvReturnValue = ExecuteProcess('}tp_util_truncate_error_dim');\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pTime",
            "Prompt": "",
            "Value": "0",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_reset_state"
    }
}