{
    "Name": "}tp_workflow_util_bounce_conflict_users",
    "HasSecurityAccess": true,
    "PrologProcedure": "################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\nStringGlobalVariable('gCheckBouncingOnly');\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim,cVersionDim,cVersionSlicesWrite );\r\nEndIf;\r\n\r\npApprovalDim = cApprovalDim;\r\n\r\n#***\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'parameters: pAppId=' | pAppId | '|pNode=' | pNode | '|pApprovalDim=' | pApprovalDim | '|pTime=' | pTime;\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\n#***\r\ncStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\nvOwnershipNodeOnCurrentNode = CellGetS(cStateCube, pNode, cTakeOwnershipNode);\r\n#***\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 1;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'number cubes to check=' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nWhile (indexCube <= totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve cube flag ' | cCubeName | ' is ' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tIf (cIsAppCube @= 'A' & pNewOwnerID @<>'' & DIMIX('}Clients', pNewOwnerID) >0 );\r\n\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = cVersionSlicesWrite;\r\n\t\tIF (cVersionSlicesWrite @<> '');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\tElse;\r\n\t\t\tvPosVersion = 1;\r\n\t\tEndif;\r\n\r\n\t\tWhile (vPosVersion >0);\r\n\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tcCubeAddress = '';\r\n\t\t\taddConcatSymbol = 0;\r\n\r\n\t\t\tdimensionIndex = 1;\r\n\t\t\tWhile (dimensionIndex > 0 ); \r\n\t\t\t\tcCubeDimensionName = TABDIM(cCubeName, dimensionIndex);\r\n\t\t\t\tIf (cCubeDimensionName @= '');\r\n\t\t\t\t\tdimensionIndex = -1;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tIf (addConcatSymbol > 0);\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | '|';\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\taddConcatSymbol = 1;\r\n\t\t\t\t\tEndIf; \r\n\r\n\t\t\t\t\tIF (cCubeDimensionName @=cVersionDim & vVersionSlice @<> '');\r\n\t\t\t\t\t\tIF (DIMIX(cVersionDim, vVersionSlice)=0);\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | vVersionSlice; \r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\r\n\t\t\t\t\tIF (pApprovalDim @<> '');\r\n\t\t\t\t\t\tIF (cCubeDimensionName @= pApprovalDim & pNode @<> '');\r\n\t\t\t\t\t\t\tIF (vOwnershipNodeOnCurrentNode @= '');\r\n\t\t\t\t\t\t\t\tvOwnershipNodeOnCurrentNode = pNode;\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\tcCubeAddress = cCubeAddress | vOwnershipNodeOnCurrentNode;\r\n\t\t\t\t\t\t\tvApprovalDimIndex = dimensionIndex;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'Reserve address = ' | cCubeAddress;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tdimensionIndex = dimensionIndex + 1;\r\n\t\t\tEnd;\r\n\r\n\t\t\t## get conflict reservations\r\n\t\t\t## we need two rounds, the first round get all conflict DRs from other users and bounce\r\n\t\t\t## the second round get overlapping DRs from the same user and bounce\r\n\t\t\tvRound = 1;\r\n\t\t\tWhile (vRound <=2);\r\n\t\t\t\tvIndex = 1;\r\n\t\t\t\tvDelim = '|';\r\n\t\t\t\tIf (vRound = 1);\r\n\t\t\t\t\tvConflictAddress =CubeDataReservationGetConflicts(vIndex, cCubeName, pNewOwnerID, cCubeAddress, vDelim) ;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvConflictAddress = CubeDataReservationGet(vIndex, cCubeName, pNewOwnerID,vDelim) ;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIf (vConflictAddress @= '' & cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'There are no conflict reservations on cube ' | cCubeName;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tWHILE (vConflictAddress @<> '' );\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tcLogCubeText = 'Conflict reservation on cube ' | cCubeName | ' for - ' | vConflictAddress;\r\n\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t#Get conflict DR time\r\n\t\t\t\t\tvPos = SCAN(vDelim, vConflictAddress);\r\n\t\t\t\t\tvLength=LONG(vConflictAddress);\r\n\t\t\t\t\tvConflictDRTime = SUBST(vConflictAddress, 1, vPos-1);\r\n\r\n\t\t\t\t\t#Get conflict DR user\r\n\t\t\t\t\tvConflictAddress=SUBST(vConflictAddress, vPos+1, vLength-vPos);\r\n\t\t\t\t\tvPos = SCAN(vDelim, vConflictAddress);\r\n\t\t\t\t\tvLength=LONG(vConflictAddress);\r\n\t\t\t\t\tvConflictUser = SUBST(vConflictAddress, 1, vPos-1);\r\n\r\n\t\t\t\t\t#Get conflict address\r\n\t\t\t\t\tvFinalConflictAddress = SUBST(vConflictAddress, vPos+1, vLength-vPos);\r\n\t\t\t\t\t\r\n\t\t\t\t\t#\r\n\t\t\t\t\tIf (vApprovalDimIndex>0 & vConflictUser @<> '');\r\n\t\t\t\t\t\t#Step 1: Get conflict ownership node\r\n\t\t\t\t\t\tvParseAddress = vFinalConflictAddress;\r\n\t\t\t\t\t\tvParseDimIndex = 1;\r\n\t\t\t\t\t\tWhile (vParseDimIndex <> vApprovalDimIndex);\r\n\t\t\t\t\t\t\tvParsePos = SCAN(vDelim, vParseAddress);\r\n\t\t\t\t\t\t\tvParseAddress = SUBST(vParseAddress, vParsePos+1, LONG(vParseAddress)-vParsePos); \r\n\t\t\t\t\t\t\tvParseDimIndex = vParseDimIndex +1;\r\n\t\t\t\t\t\tEnd;\r\n\t\t\t\t\t\tvParsePos = SCAN(vDelim, vParseAddress);\r\n\t\t\t\t\t\tIF (vParsePos >0);\r\n\t\t\t\t\t\t\tvConflictOwnershipNode = SUBST(vParseAddress, 1, vParsePos-1);\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tvConflictOwnershipNode  = vParseAddress;\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t#Step 2:  Check overlapped leaf nodes between bouncer ownership node and conflict node ID\r\n\t\t\t\t\t\tIF (vConflictOwnershipNode @<> '');\t\r\n\t\t\t\t\t\t\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | vConflictOwnershipNode | ']) }, 0), \r\n\t\t\t\t\t\t\t\tTM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | vOwnershipNodeOnCurrentNode | ']) }, 0)) }';\r\n\r\n\t\t\t\t\t\t\tvSubsetConflictLeafChildren = 'tp_conflictLeafChildren_' | pExecutionId;\r\n\t\t\t\t\t\t\tIf (SubsetExists(cShadowApprovalDim, vSubsetConflictLeafChildren) <>0);\r\n\t\t\t\t\t\t\t\tSubsetDestroy(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tSubsetCreateByMdx(vSubsetConflictLeafChildren, vMDX, cShadowApprovalDim);\r\n\r\n\t\t\t\t\t\t\t#Step 3: If both users have EDIT permission on one of leaf nodes, we need to bounce the conflict user\r\n\t\t\t\t\t\t\tvTotalConflictLeafNodes = SubsetGetSize(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\n\t\t\t\t\t\t\tvHasConflict = 'F';\r\n\t\t\t\t\t\t\tvLooper = 1;\r\n\t\t\t\t\t\t\tWhile (vLooper <= vTotalConflictLeafNodes);\r\n\t\t\t\t\t\t\t\tvConflictLeafNode = SubsetGetElementName(cShadowApprovalDim, vSubsetConflictLeafChildren, vLooper);\r\n\r\n\t\t\t\t\t\t\t\t#Check conflict user privilege on the node\r\n\t\t\t\t\t\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vConflictLeafNode, 'pUser', vConflictUser, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvConflictUserRight = gEdit;\r\n\r\n\t\t\t\t\t\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vConflictLeafNode, 'pUser', pNewOwnerId, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvNewOwnerRight = gEdit;\r\n\r\n\t\t\t\t\t\t\t\tIF (vConflictUserRight @= 'T' & vNewOwnerRight @= 'T');\r\n\t\t\t\t\t\t\t\t\tvHasConflict = 'T';\r\n\t\t\t\t\t\t\t\t\tvLooper = vTotalConflictLeafNodes;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tvLooper = vLooper +1;\r\n\r\n\t\t\t\t\t\t\tEnd;\r\n\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t#Bounce conflict user's revervation/ownership\r\n\t\t\t\t\t\tIf (vHasConflict @= 'T');\r\n\r\n\t\t\t\t\t\t\tvDoBounce = 'N';\r\n\t\t\t\t\t\t\tIF (vRound = 1 );\r\n\t\t\t\t\t\t\t\tvDoBounce = 'Y';\r\n\t\t\t\t\t\t\tElseIf (vRound =2 & ( ELISANC(cShadowApprovalDim, vConflictOwnershipNode, vOwnershipNodeOnCurrentNode) =1 \r\n\t\t\t\t\t\t\t\t% ELISANC(cShadowApprovalDim, vConflictOwnershipNode, vOwnershipNodeOnCurrentNode)  =1));\r\n\t\t\t\t\t\t\t\t#Don't bounce yourself if ownershipnodes are the same\r\n\t\t\t\t\t\t\t\t#Bounce yourself if ownership nodes are different, applies to rejecting a leaf node\r\n\t\t\t\t\t\t\t\tIF (vOwnershipNodeOnCurrentNode @<> vConflictOwnershipNode);\r\n\t\t\t\t\t\t\t\t\tvDoBounce = 'Y';\r\n\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\tIF (vDoBounce @='Y');\r\n\t\t\t\t\t\t\t\tIF (gCheckBouncingOnly @='Y');\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_bounce_nodes_message', \r\n\t\t\t\t\t\t\t\t\t\t'pExecutionId', pExecutionId,'pAppId', pAppId, 'pOwnerIdToBounce',vConflictUser, \r\n\t\t\t\t\t\t\t\t\t\t'pOwnershipNodeToBounce', vConflictOwnershipNode,'pSourceNode', pNode, 'pTime', pTime,'pControl', pControl);\r\n\r\n\t\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t\t\t\t\t\t'pOwnerIdToBounce',vConflictUser, 'pOwnershipNodeToBounce', vConflictOwnershipNode,'pSourceNode', pNode, 'pTime', pTime,\r\n\t\t\t\t\t\t\t\t\t\t'pParentTIUpdateStateCube','N', 'pControl', pControl);\r\n\r\n\t\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\tvIndex = vIndex + 1;\r\n\r\n\t\t\t\t\tIf (vRound = 1);\r\n\t\t\t\t\t\tvConflictAddress =CubeDataReservationGetConflicts(vIndex, cCubeName, pNewOwnerID, cCubeAddress, vDelim) ;\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\tvConflictAddress = CubeDataReservationGet(vIndex, cCubeName, pNewOwnerID,vDelim) ;\r\n\t\t\t\t\tEndif;\r\n\t\t\t\t\t\r\n\t\t\t\tEnd;\t\r\n\t\t\t\r\n\t\t\t\tvRound = vRound +1;\r\n\t\t\tEnd;\r\n\t\tEnd;\r\n\tEndIf;\r\n \r\n\tindexCube = indexCube + 1;\r\nEnd;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIf (SubsetExists(cShadowApprovalDim, vSubsetConflictLeafChildren) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubsetConflictLeafChildren);\r\nEndIf;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pNode",
            "Prompt": "",
            "Value": "NA",
            "Type": "String"
        },
        {
            "Name": "pTime",
            "Prompt": "",
            "Value": "0",
            "Type": "String"
        },
        {
            "Name": "pNewOwnerID",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_workflow_util_bounce_conflict_users"
    }
}