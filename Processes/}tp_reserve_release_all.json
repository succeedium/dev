{
    "Name": "}tp_reserve_release_all",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n#***\r\n\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Release all slices pAppId=' | pAppId | '|User=' | TM1User();\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 0;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve cube number cubes to check' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nWhile (indexCube < totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube+1);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve cube flag ' | cCubeName | ' is ' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tIf (cIsAppCube @<> '');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t## debug list reservations\r\n\t\t\tvIndex = 1;\r\n\t\t\tvDelim = '|';\r\n\t\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '',vDelim);\r\n\t\t\tIf (vAddress @= '');\r\n\t\t\t\tcLogCubeText = 'There are no reservations on cube ' | cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\t\t\tWHILE (vAddress @<> '');\r\n\t\t\t\tcLogCubeText = 'There is a reservation on cube ' | cCubeName | ' for - ' | vAddress;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '', vDelim);\r\n\t\t\tEnd;\t\r\n\t\tEndIf;\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t\t'pCube', cCubeName, 'pApprovalDim', '', 'pNode', '', 'pReserve', 'N', 'pUser', '','pControlDim','','pControlWritableSlices', '');\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n \r\n\tindexCube = indexCube + 1;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\t## debug list reservations\r\n\t\tvIndex = 1;\r\n\t\tvDelim = '|';\r\n\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '',vDelim);\r\n\t\tIf (vAddress @= '');\r\n\t\t\tcLogCubeText = 'There are no reservations on cube ' | cCubeName;\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\tEndIf;\r\n\t\tWHILE (vAddress @<> '');\r\n\t\t\tcLogCubeText = 'There is a reservation on cube ' | cCubeName | ' for - ' | vAddress;\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tvIndex = vIndex + 1;\r\n\t\t\tvAddress = CubeDataReservationGet( vIndex, cCubeName, '', vDelim);\r\n\t\tEnd;\t\r\n\tEndIf;\r\nEnd;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_reserve_release_all"
    }
}