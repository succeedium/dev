{
    "Name": "}tp_workflow_save_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** \r\n\r\nIf (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cShadowApprovalDim @<> '');\r\n\tcPrincipalNodeName = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\nEndIf;\r\n\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @='N');\r\n\t\r\n\t#*** Check user privilege\r\n\tif (cShadowApprovalDim @<> '');\r\n\t\tStringGlobalVariable('gEdit');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', TM1User, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tIf (gEdit @= 'F');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t\t\t'pErrorDetails', 'EDIT' | ', ' | pNode,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\t#*** Check owner\r\n\tcCurrentOwner = 'CurrentOwnerId';\r\n\tcOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\tif ((cShadowApprovalDim @= '' & cOwner @<> '' & TM1User @<> cOwner) %\r\n\t\t\t(cShadowApprovalDim @<> '' & TM1User @<> cOwner));\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_OWNER',\r\n\t\t\t'pErrorDetails', 'Save' | ', ' | pNode | ', ' | cOwner,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\t#*** Set values\r\n\tcSaved = 'Saved';\r\n\tCellPutS('Y', cStateCube, cStateMember, cSaved);\r\n\t\r\n\tcDataChangeUser = 'DataChangeUser';\r\n\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cDataChangeUser);\r\n\t\r\n\tcDataChangeDate = 'DataChangeDate';\r\n\tCellPutS(pTime, cStateCube, cStateMember, cDataChangeDate);\r\nElse;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubsetLeafChildren = 'save_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <> 0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\n\r\n\tlooper = vSize;\r\n\tvLeafOwnedAtRightLevel = 0;\r\n\tWhile (looper >=1);\r\n\t\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\t\r\n\t\tIf (vLeafChild @<> pNode);\r\n\t\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vLeafChild, 'pUser', TM1User, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tcCurrentOwner = 'CurrentOwner';\r\n\t\t\tcCurrentOwnerValue = CellGetS(cStateCube, vLeafChild, cCurrentOwner);\r\n\t\t\t\r\n\t\t\tcState = 'State';\r\n\t\t\tcStateValue = CellGetS(cStateCube, vLeafChild, cState);\r\n\t\t\t\r\n\t\t\tcTakeOwnershipNode = 'TakeOwnershipNode';\r\n\t\t\tcTakeOwnershipNodeValue = CellGetS(cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\r\n\t\t\tIf (gEdit @= 'T' & \r\n\t\t\t    cDisplayUserName @= cCurrentOwnerValue & \r\n\t\t\t    cStateValue @= '2' &\r\n\t\t\t    cTakeOwnershipNodeValue @= cPrincipalNodeName);\r\n\t    \r\n\t\t\t\t#*** Set values\r\n\t\t\t\tcSaved = 'Saved';\r\n\t\t\t\tCellPutS('Y', cStateCube, vLeafChild, cSaved);\r\n\t\t\t\t\r\n\t\t\t\tcDataChangeUser = 'DataChangeUser';\r\n\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vLeafChild, cDataChangeUser);\r\n\t\t\t\t\r\n\t\t\t\tcDataChangeDate = 'DataChangeDate';\r\n\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cDataChangeDate);\r\n\r\n\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\t\t\tEndIf;\t\r\n\t\tEndIf;\r\n\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\r\n\tIf (vLeafOwnedAtRightLevel =0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t\t'pErrorDetails', 'Save' | ', ' | pNode,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pTime",
            "Prompt": "",
            "Value": "0",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pNode",
            "Prompt": "",
            "Value": "NA",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_workflow_save_node"
    }
}