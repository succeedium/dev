{
    "Name": "}tp_application_deploy",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pAppId, pApprovalDim, pApprovalSubset, pControl);\r\nEndIf;\r\n\r\n#*** Check if the application has been deployed\r\nvIsNewDeployment = 'N';\r\nseIsNewVersionDimensionAdded = 'N';\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Insert current application id');\r\n\tEndIf;\r\n\r\n\tvIsNewDeployment = 'Y';\r\n\tDimensionElementInsert(cApplicationsDim, '', pAppId, 'S');\r\n\r\nElse;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'This application already existed: ' | pAppId);\r\n\tEndIf;\r\n\t\r\n\tStringGlobalVariable('gVersionDimension');\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_application_attributes', 'pExecutionId', pExecutionId,\r\n\t\t'pAppId', pAppId, 'pControl',  pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (gVersionDimension @= '' & pVersionDim @<> '');\r\n\t\tseIsNewVersionDimensionAdded = 'Y';\t\t\t\r\n\tEndIf;\r\n\t\r\n\tIf (seIsNewVersionDimensionAdded @= 'Y');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Version dimension is added in redeployment: ' | pVersionDim);\r\n\t\tEndIf;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#**Insert application ID to intermediate applications dim\r\ncIntermediateApplicationsDim =  '}tp_intermediate_security_applications';\r\ncParent = 'all_applications';\r\n\r\nIf (DimensionExists(cIntermediateApplicationsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create Intermediate security applications dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cIntermediateApplicationsDim);\r\n\tDimensionElementInsert(cIntermediateApplicationsDim, '', cParent,'C');\r\nEndIf;\r\n\r\nIf (DIMIX(cIntermediateApplicationsDim, pAppId) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Insert current application id');\r\n\tEndIf;\r\n\r\n\tDimensionElementInsert(cIntermediateApplicationsDim, '', pAppId, 'N');\r\n\tDimensionElementComponentAdd(cIntermediateApplicationsDim, cParent,pAppId, 1);\r\nEndIf;\r\n\r\n\r\n#*** Application with approval dimension\r\nIf (pApprovalDim @<> '');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check approval dimension');\r\n\tEndIf;\r\n\t\r\n\tIf (DimensionExists(pApprovalDim) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', pApprovalDim,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tStringGlobalVariable('gDoesDimHaveCubeName');\r\n\tvReturnValue = ExecuteProcess('}tp_util_does_dim_have_cube_name',\r\n\t'pExecutionId', pExecutionId, 'pDim', pApprovalDim, 'pControl',  pControl);\r\n\t\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (gDoesDimHaveCubeName @= 'Y');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'There is a cube with the same name as approval dimension');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check approval subset');\r\n\tEndIf;\r\n\t\r\n\tIf (SubsetExists(pApprovalDim, pApprovalSubset) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_SUBSET_NOT_EXIST',\r\n\t\t'pErrorDetails', pApprovalDim | ', ' | pApprovalSubset,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tcShadowApprovalDim = '}tp_tasks}' | pAppId;\r\n\tcPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\tcCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\t\r\n\t#***\r\n\tvReturnValue = ExecuteProcess('}tp_deploy_create_shadow_dimension', 'pExecutionId', pExecutionId,\r\n\t\t'pAppId', pAppId, 'pApprovalDim', pApprovalDim, 'pApprovalSubset', pApprovalSubset, 'pSubsetAlias', pSubsetAlias, 'pIncrShadowDimUpdate', pIncrShadowDimUpdate);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check permission dimension');\r\n\tEndIf;\r\n\r\n\tcPermissionsDim = cControlPrefix | 'tp_permissions';\r\n\tIf (DimensionExists(cPermissionsDim) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cPermissionsDim,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\r\n\tIf (CubeExists(cPermissionCube) = 0);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create permission cube: ' | cPermissionCube);\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cPermissionCube, cShadowApprovalDim, cPermissionsDim);\r\n\t\tCubeSetLogChanges(cPermissionCube, 1);\r\n\tEndIf;\r\n\r\n\t#***\r\n\r\n\tIf (CubeExists(cCellSecurityCube) = 0);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create permission cell security cube: ' | cCellSecurityCube);\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cCellSecurityCube, cShadowApprovalDim, cPermissionsDim, '}Groups');\r\n\t\tCubeSetLogChanges(cCellSecurityCube, 1);\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check node info dimension');\r\n\tEndIf;\r\n\t\r\n\tcNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\tIf (DimensionExists(cNodeInfoDim) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cNodeInfoDim,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\t\r\n\tcDefaultView = 'Default';\r\n\tcAllView = 'All';\r\n\tIf (CubeExists(cStateCube) = 0);\r\n\t\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create state cube: ' | cStateCube);\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cStateCube, cShadowApprovalDim, cNodeInfoDim);\r\n\t\tCubeSetLogChanges(cStateCube, 1);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create default view');\r\n\t\tEndIf;\r\n\t\r\n\t\tViewCreate(cStateCube, cDefaultView);\r\n\t\tViewColumnDimensionSet(cStateCube, cDefaultView, cNodeInfoDim, 1);\r\n\t\tViewRowDimensionSet(cStateCube, cDefaultView, cShadowApprovalDim, 1);\r\n\t\tViewSubsetAssign(cStateCube, cDefaultView, cShadowApprovalDim, pApprovalSubset);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create All view');\r\n\t\tEndIf;\r\n\t\r\n\t\tViewCreate(cStateCube, cAllView);\r\n\t\tViewColumnDimensionSet(cStateCube, cAllView, cNodeInfoDim, 1);\r\n\t\tViewRowDimensionSet(cStateCube, cAllView, cShadowApprovalDim, 1);\r\n\t\r\n\t\r\n\tEndIf;\r\n\t\r\n\t#***create intermediate security measure dimension\r\n\tcIntermediateSecurityMeasuresDim = '}tp_intermediate_security_measures';\r\n\r\n\tIf (DimensionExists(cIntermediateSecurityMeasuresDim) = 0);\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Create Intermediate security measure dimension');\r\n\t\tEndIf;\r\n\r\n\t\tDimensionCreate(cIntermediateSecurityMeasuresDim);\r\n\t\tDimensionElementInsert(cIntermediateSecurityMeasuresDim, '', 'Rights','S');\r\n\t\tDimensionElementInsert(cIntermediateSecurityMeasuresDim, '', 'WriteCount','N');\r\n\t\tDimensionElementInsert(cIntermediateSecurityMeasuresDim, '', 'ReadCount','N');\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\nvSecuritySet = '';\r\nIf (vIsNewDeployment @= 'N');\r\n\tvSecuritySet = ATTRS(cApplicationsDim, pAppId, 'SecuritySet');\r\nEndIf;\r\n\r\n#***\r\nIf (pApprovalDim @<> '');\r\n\r\n\t#***First check the condition on whether we should delete the element level security cube on approvla Dimension\r\n\tvDeleteElementSecurity = 'Y';\r\n\tvAppLooper = 1;\r\n\tvTotalApplications = DIMSIZ(cApplicationsDim);\r\n\tWhile (vAppLooper <= vTotalApplications);\r\n\t\tvLoopAppId = DIMNM(cApplicationsDim, vAppLooper);\r\n\t\tvSecuritySetOnApp='';\r\n\t\tIF (vLoopAppId @= pAppId);\r\n\t\t\tIf (vIsNewDeployment @= 'N');\r\n\t\t\t\tvSecuritySetOnApp = ATTRS(cApplicationsDim, pAppId, 'SecuritySet');\r\n\t\t\tEndIf;\r\n\t\t\tIF (vSecuritySetOnApp @='Y');\r\n\t\t\t\tvDeleteElementSecurity = 'N';\r\n\t\t\tEndif;\r\n\r\n\t\tElse;\r\n\t\t\tvSecuritySetOnApp =  ATTRS(cApplicationsDim, vLoopAppId, 'SecuritySet');\r\n\t\t\tvApprovalDim =ATTRS( cApplicationsDim, vLoopAppId, 'ApprovalDimension');\r\n\t\t\tIF (vSecuritySetOnApp @= 'Y' & vApprovalDim @= pApprovalDim);\r\n\t\t\t\tvDeleteElementSecurity = 'N';\r\n\t\t\tEndif;\r\n\t\t\t\t\r\n\t\tEndif;\r\n\t\tIF (vDeleteElementSecurity @= 'N');\r\n\t\t\tvAppLooper = vTotalApplications;\r\n\t\tEndif;\r\n\t\tvAppLooper = vAppLooper +1;\r\n\tEnd;\r\n\r\n\t#****delete element security cube for approval dimension\r\n\t#an existing element security cube will impact non-admin users access approval nodes\r\n\tIF (vDeleteElementSecurity @= 'Y');\r\n\t\tcElementSecurityCube = '}ElementSecurity_' | pApprovalDim;\r\n\t\tIF (CubeExists(cElementSecurityCube) >0);\r\n\t\t\tCubeDestroy(cElementSecurityCube);\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\n\tIf (vIsNewDeployment @= 'N' & vSecuritySet @= 'N');\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Reset permission cell security cube if the previous deployment failed');\r\n\t\tEndIf;\r\n\t\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reset_permission_on_failure',\r\n\t\t'pGuid',  pExecutionId, 'pAppId', pAppId, 'pControl',  pControl);\r\n\t\t\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\r\n\tEndIf;\r\n\r\n\tsGroupsDim = '}Groups';\r\n\tcApprovalElementSecurityCube = '}ElementSecurity_' | cShadowApprovalDim;\r\n\tIf (CubeExists(cApprovalElementSecurityCube) = 0);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create element security cube for approval hierarchy');\r\n\t\tEndIf;\r\n\t\r\n\t\tCubeCreate(cApprovalElementSecurityCube, cShadowApprovalDim, sGroupsDim);\r\n\t\tCubeSetLogChanges(cApprovalElementSecurityCube, 1);\r\n\t\r\n\tElse;\r\n\t\r\n\t\tIf (vIsNewDeployment @= 'Y');\r\n\t\t\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Destroy element security cube for approval hierarchy for new deployment');\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tCubeDestroy(cApprovalElementSecurityCube);\r\n\t\t\tCubeCreate(cApprovalElementSecurityCube,cShadowApprovalDim, sGroupsDim);\r\n\t\t\tCubeSetLogChanges(cApprovalElementSecurityCube, 1);\r\n\t\r\n\t\tEndIf;\r\n\t\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Insert approval dimension and subset attributes');\r\nEndIf;\r\n\r\ncApprovalDimensionAttr = 'ApprovalDimension';\r\ncApprovalSubsetAttr = 'ApprovalSubset';\r\ncIsActiveAttr = 'IsActive';\r\ncCubeViews = 'CubeViews';\r\ncShadowDimAttr = 'ApprovalShadowDimension';\r\ncVersionSlicesWriteAttr = 'VersionSlicesWrite';\r\ncVersionSlicesWriteAttrOld = 'VersionSlicesWriteOld';\r\ncVersionSlicesReadAttr = 'VersionSlicesRead';\r\ncVersionSlicesReadAttrOld = 'VersionSlicesReadOld';\r\ncVersionDimAttr = 'VersionDimension';\r\ncVersionDimAttrOld = 'VersionDimensionOld';\r\ncAppTypeAttr = 'ApplicationType';\r\n\r\nif (vIsNewDeployment @= 'Y');\r\n\tvVersionDimensionOld = pVersionDim;\r\nelse;\r\n\tvVersionDimensionOld = AttrS(cApplicationsDim, pAppId, cVersionDimAttr);\r\nendif;\r\n\r\nvVersionSlicesWriteOld = AttrS(cApplicationsDim, pAppId, cVersionSlicesWriteAttr);\r\nvVersionSlicesReadOld = AttrS(cApplicationsDim, pAppId, cVersionSlicesReadAttr);\r\n\r\nAttrPutS(pApprovalDim, cApplicationsDim, pAppId, cApprovalDimensionAttr);\r\nAttrPutS(pApprovalSubset, cApplicationsDim, pAppId, cApprovalSubsetAttr);\r\nAttrPutS('Y', cApplicationsDim, pAppId, cIsActiveAttr);\r\nAttrPutS(pCubeViews, cApplicationsDim, pAppId, cCubeViews);\r\nAttrPutS(cShadowApprovalDim, cApplicationsDim, pAppId,cShadowDimAttr);\r\nAttrPutS('', cApplicationsDim, pAppId, cAppTypeAttr);\r\nAttrPutS(pVersionDim, cApplicationsDim, pAppId, cVersionDimAttr);\r\nAttrPutS(vVersionDimensionOld, cApplicationsDim, pAppId, cVersionDimAttrOld);\r\nAttrPutS(pVersionSlicesWrite, cApplicationsDim, pAppId, cVersionSlicesWriteAttr);\r\nAttrPutS(vVersionSlicesWriteOld, cApplicationsDim, pAppId, cVersionSlicesWriteAttrOld);\r\nAttrPutS(pVersionSlicesRead, cApplicationsDim, pAppId, cVersionSlicesReadAttr);\r\nAttrPutS(vVersionSlicesReadOld, cApplicationsDim, pAppId, cVersionSlicesReadAttrOld);\r\n\r\n#***\r\nIf (pApprovalDim @<> '');\r\n\r\n\t#***create task navigation dimensions/cube for this application\r\n\tvReturnValue = ExecuteProcess('}tp_deploy_create_task_navigation_cube', 'pExecutionId', pExecutionId,\r\n\t\t'pAppId', pAppId, 'pNavigationDimensions',  pApprovalDim | '*');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcApprovalDimSize = DIMSIZ(cShadowApprovalDim);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set state cube value for state if the node is in the subset');\r\n\tEndIf;\r\n\t\r\n\tvIndex = 1;\r\n\tWhile (vIndex <= cApprovalDimSize);\r\n\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\r\n\t\tvValue = CellGetS(cStateCube, vElement, 'State');\r\n\t\tIf (vValue @= '');\r\n\t\t\tIf (CellIsUpdateable(cStateCube, vElement, 'State') = 0);\r\n\t\t\t\tvDetail=INSRT('State',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vElement,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('0', cStateCube, vElement, 'State');\r\n\t\tEndIf;\r\n\r\n\t\tvIndex = vIndex + 1;\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\n#*** Create \"everyone\" group\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (DIMIX('}Groups', cTpEveryoneGroup) <> 0);\r\n\t\tDeleteGroup(cTpEveryoneGroup);\r\n\tEndIf;\r\n\r\n\tcEveryoneGroup = cCognosEveryoneGroup;\r\n\r\nElse;\r\n\r\n\tcEveryoneGroup = cTpEveryoneGroup;\r\n\r\n\tIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\t\tAddGroup(cEveryoneGroup);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (pApprovalDim @<> '');\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Give everyone group \"Read\" right to application artifacts.');\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make approval dimension readable');\r\n\tEndIf;\r\n\t\r\n\tsDimensionSecurityCube = '}DimensionSecurity';\r\n\tIf (CubeExists(sDimensionSecurityCube) = 1);\r\n\t\tcCurrentCellValue = CellGetS(sDimensionSecurityCube, cShadowApprovalDim, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sDimensionSecurityCube, cShadowApprovalDim, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cShadowApprovalDim,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sDimensionSecurityCube, cShadowApprovalDim, cEveryoneGroup);\r\n\t\tEndIf;\r\n\t\tcCurrentCellValue = CellGetS(sDimensionSecurityCube, pApprovalDim, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sDimensionSecurityCube, pApprovalDim, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(pApprovalDim,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sDimensionSecurityCube, pApprovalDim, cEveryoneGroup);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\t#*\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make permission cube readable');\r\n\tEndIf;\r\n\t\r\n\tsCubeSecurityCube = '}CubeSecurity';\r\n\tIf (CubeExists(sCubeSecurityCube) = 1);\r\n\t\tcCurrentCellValue = CellGetS(sCubeSecurityCube, cPermissionCube, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sCubeSecurityCube, cPermissionCube, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cPermissionCube,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sCubeSecurityCube, cPermissionCube, cEveryoneGroup);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t        TextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'CellPutS: Make permission cube readable');\r\n\t        EndIf;\r\n\t\tEndIf;\r\n\t\t\r\n\t\tcCurrentCellValue = CellGetS(sCubeSecurityCube, cCellSecurityCube, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sCubeSecurityCube, cCellSecurityCube, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cCellSecurityCube,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sCubeSecurityCube, cCellSecurityCube, cEveryoneGroup);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t        TextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'CellPutS: Make cell security cube of permission cube readable');\r\n\t        EndIf;\r\n\t\tEndIf;\r\n\r\n\tEndIf;\r\n\t\r\n\t#*\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make state cube readable');\r\n\tEndIf;\r\n\t\r\n\tIf (CubeExists(sCubeSecurityCube) = 1);\r\n\t\tcCurrentCellValue = CellGetS(sCubeSecurityCube, cStateCube, cEveryoneGroup); \r\n\t\tIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\t\t\tIf (CellIsUpdateable(sCubeSecurityCube, cStateCube, cEveryoneGroup) = 0);\r\n\t\t\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(cStateCube,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('Read', sCubeSecurityCube, cStateCube, cEveryoneGroup);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t        TextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'CellPutS: Make state cube readable');\r\n\t        EndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#****\r\n#Put all readable slices and writable slices into one subset\r\n#This subset will be used on client side to filter on a control dimension\r\nIF (pVersionDim @<> '');\r\n\tvFilterSubset = 'tp_' | pAppId;\r\n\tIF (SubsetExists(pVersionDim, vFilterSubset) = 1);\r\n\t\tSubsetDeleteAllElements(pVersionDim, vFilterSubset);\r\n\tElse;\r\n\t\tSubsetCreate(pVersionDim, vFilterSubset);\r\n\tEndif;\r\n\t\r\n\tIf (pVersionSubsetIsExpandAbove @= 'Y');\r\n\t\tSubsetExpandAboveSet( pVersionDim, vFilterSubset, 1);\r\n\tElse;\r\n\t\tSubsetExpandAboveSet( pVersionDim, vFilterSubset, 0);\r\n\tEndif;\r\n\r\n\ttotalControlSlices= SubsetGetSize(pVersionDim, pVersionSubset);\r\n\tlooper = totalControlSlices;\r\n\tWhile (looper >= 1);\r\n\t\tvSlice = SubsetGetElementName(pVersionDim, pVersionSubset, looper);\r\n\t\r\n\t\t#parse readable slices\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = pVersionSlicesRead;\r\n\t\tvSliceAdded = 'N';\r\n\t\tIF (pVersionSlicesRead @<> '' & vSliceAdded @='N');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tWhile (vPosVersion >0);\r\n\t\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\t\tIF (vVersionSlice @= vSlice);\r\n\t\t\t\t\tSubsetElementInsert(pVersionDim, vFilterSubset, vVersionSlice, 1);\r\n\t\t\t\t\tvSliceAdded = 'Y';\r\n\t\t\t\tEndif;\r\n\t\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tEnd;\r\n\t\tEndif;\r\n\t\r\n\t\t#parse writable slices\r\n\t\tversionSeparater = '|';\r\n\t\tvPosVersion = 0;\r\n\t\tvStringToScan = pVersionSlicesWrite;\r\n\t\tIF (pVersionSlicesWrite @<> '' & vSliceAdded @= 'N');\r\n\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tWhile (vPosVersion >0);\r\n\t\t\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\t\t\tIF (vVersionSlice @= vSlice);\r\n\t\t\t\t\tSubsetElementInsert(pVersionDim, vFilterSubset, vVersionSlice, 1);\r\n\t\t\t\t\tvSliceAdded = 'Y';\r\n\t\t\t\tEndif;\r\n\t\t\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\t\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\t\t\tEnd;\r\n\t\tEndif;\r\n\t\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\n# Clear }CellSecurity_}tp_application_root_permissions, it will be re-populated with the current offline Groups\r\ncOfflinePermissionElement = 'OFFLINE';\r\nvOfflinePermissionViewName = 'temp_offline_perm_' | pAppId;\r\nvOfflinePermissionCubeName = '}CellSecurity_}tp_application_root_permissions';\r\n\r\nvDimOfflinePermissions = '}tp_root_permissions';\r\nIf (ViewExists(vOfflinePermissionCubeName, vOfflinePermissionViewName) = 0);\r\n\tvAppFilterSubset = 'temp_offline_perm_app' | pAppId;\r\n\tIf (SubsetExists(cApplicationsDim, vAppFilterSubset) = 1);\r\n\t\tSubsetDestroy(cApplicationsDim, vAppFilterSubset);\r\n\tEndIf;\r\n\tSubsetCreate(cApplicationsDim, vAppFilterSubset);\r\n\tSubsetElementInsert(cApplicationsDim, vAppFilterSubset, pAppId, 1);\r\n\t\r\n\tvPermFilterSubset = 'temp_offline_perm_perm' | pAppId;\r\n\tIf (SubsetExists(vDimOfflinePermissions, vPermFilterSubset) = 1);\r\n\t\tSubsetDestroy(vDimOfflinePermissions, vPermFilterSubset);\r\n\tEndIf;\r\n\tSubsetCreate(vDimOfflinePermissions, vPermFilterSubset);\r\n\tSubsetElementInsert(vDimOfflinePermissions, vPermFilterSubset, cOfflinePermissionElement, 1);\r\n\t\r\n\tViewCreate(vOfflinePermissionCubeName, vOfflinePermissionViewName);\r\n\tViewSubsetAssign(vOfflinePermissionCubeName, vOfflinePermissionViewName, cApplicationsDim, vAppFilterSubset);\r\n\tViewSubsetAssign(vOfflinePermissionCubeName, vOfflinePermissionViewName, vDimOfflinePermissions, vPermFilterSubset);\r\nEndIf;\r\nViewZeroOut(vOfflinePermissionCubeName, vOfflinePermissionViewName);\r\nViewDestroy(vOfflinePermissionCubeName, vOfflinePermissionViewName);\r\nSubsetDestroy(cApplicationsDim, vAppFilterSubset);\r\nSubsetDestroy(vDimOfflinePermissions, vPermFilterSubset);\r\n\r\n#parse canoffile groups\r\nofflineSeparater = '|';\r\nvPosOffline = 0;\r\nvStringToScan = pOfflineGroups;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set offline groups:'|pOfflineGroups);\r\nEndIf;\r\ncOfflineRead = 'READ';\r\nIF (pOfflineGroups @<> '');\r\n\tvPosOffline = SCAN(offlineSeparater, vStringToScan);\r\n\tWhile (vPosOffline >0);\r\n\t\tvOfflineGroup  = SUBST(vStringToScan, 1, vPosOffline-1);\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set offline group:'|cOfflineRead|':'|vOfflinePermissionCubeName|':'|pAppId|':OFFLINE:'|vOfflineGroup);\r\n\t\tEndIf;\r\n\t\tCellPutS(cOfflineRead, vOfflinePermissionCubeName, pAppId, cOfflinePermissionElement, vOfflineGroup);\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosOffline +1, LONG(vStringToScan)-vPosOffline);\r\n\t\tvPosOffline = SCAN(offlineSeparater, vStringToScan);\r\n\t\t  \r\n\tEnd;\r\nEndif;\r\nvEveryoneSet = CellGetS(vOfflinePermissionCubeName, pAppId, cOfflinePermissionElement, cEveryoneGroup);\r\nIf (vEveryoneSet @= '');\r\n\t#*** set NONE for everyone\r\n\tCellPutS('NONE', vOfflinePermissionCubeName, pAppId, cOfflinePermissionElement, cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pApprovalDim",
            "Prompt": "",
            "Value": "TestElist",
            "Type": "String"
        },
        {
            "Name": "pApprovalSubset",
            "Prompt": "",
            "Value": "TestElist",
            "Type": "String"
        },
        {
            "Name": "pCubeViews",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pSubsetAlias",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pVersionDim",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pVersionSubset",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pVersionSubsetIsExpandAbove",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        },
        {
            "Name": "pVersionSlicesWrite",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pVersionSlicesRead",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pOfflineGroups",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pIncrShadowDimUpdate",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "Y",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_application_deploy"
    }
}