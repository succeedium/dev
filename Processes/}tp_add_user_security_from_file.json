{
    "Name": "}tp_add_user_security_from_file",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncTM1Process = cControlPrefix | 'tp_add_user_security_from_file';\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names',\r\n'pExecutionId', pExecutionId, 'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cControlPrefix | 'tp_config', 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\t\tpExecutionId, pAppId, pReviewerEditOn, pSourceFile, pCubeInfo, pControl);\r\nEndIf;\r\n\r\n#*** Set local variables\r\nDataSourceType = 'CHARACTERDELIMITED';\r\nDatasourceASCIIDelimiter = CHAR(9);\r\nDatasourceASCIIQuoteCharacter = '';\r\nDatasourceASCIIHeaderRecords = 1;\r\nDatasourceNameForServer = pSourceFile;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'DataSourceType: ' | DataSourceType);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIDelimiter: ' | DatasourceASCIIDelimiter);\r\n\tTextOutput(cTM1Log, 'DatasourceASCIIHeaderRecords: ' | NumberToString(DatasourceASCIIHeaderRecords));\r\n\tTextOutput(cTM1Log, 'DatasourceNameForServer: ' | DatasourceNameForServer);\r\nEndIf;\r\n\r\n#*** Set input file encoding as UTF-8\r\n\r\nSetInputCharacterSet('TM1CS_UTF8');\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check application dimension');\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\ncAppElementSecurityCube = '}ElementSecurity_' | cApplicationsDim;\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t'pGuid', pExecutionId,\r\n\t'pProcess', cTM1Process,\r\n\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t'pErrorDetails', cApplicationsDim,\r\n\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check application id', pAppId);\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t'pGuid', pExecutionId,\r\n\t'pProcess', cTM1Process,\r\n\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t'pErrorDetails', cApplicationsDim | ', ' | pAppId,\r\n\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Get Approval dimension and subset');\r\nEndIf;\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncSecuritySet = ATTRS('}tp_applications', pAppId,  'SecuritySet');\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\ncVersionSlicesRead =ATTRS('}tp_applications', pAppId, 'VersionSlicesRead');\r\ncSecurityMethod = ATTRS('}tp_applications', pAppId, 'SecurityMethod');\r\ncElementSecurity = 'ELEMENT_SECURITY';\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t'tp_get_application_attributes', cApprovalDim, cApprovalSubset, \r\n\t\tcSecuritySet,cShadowApprovalDim,cVersionDim, cVersionSlicesWrite );\r\nEndIf;\r\n\r\n#***\r\nIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '');\r\n\t#create version subset that contains this version only\r\n\tvVersionSubset = 'temp_app_version' | pAppId;\r\n\tIF (SubsetExists(cVersionDim, vVersionSubset)>0);\r\n\t\tsubsetDestroy(cVersionDim, vVersionSubset);\r\n\tEndIf;\r\n\tSubsetCreate(cVersionDim, vVersionSubset);\r\n\tversionSeparater = '|';\r\n\tvPosVersion = 0;\r\n\tvStringToScan = cVersionSlicesWrite;\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\tWhile (vPosVersion >0);\r\n\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\tIF (DIMIX(cVersionDim, vVersionSlice) >0);\r\n\t\t\tSubsetElementInsert(cVersionDim, vVersionSubset, vVersionSlice, 1);\r\n\t\tElse;\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\tProcessError;\t\t\t\r\n\t\tEndIf;\r\n\t\t\r\n\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tEnd;\r\n\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cApprovalDim @= '');\r\n\tcOwnPermissionElement = 'OWN';\r\n\tcAppPermSecurityCube = '}CellSecurity_' | cControlPrefix | 'tp_application_root_permissions';\r\n\t\r\n\tcGroupsDimSize = DIMSIZ('}Groups');\r\n\tvIndexI = 1;\r\n\tWhile (vIndexI <= cGroupsDimSize);\r\n\t\r\n\t\tvGroup = DIMNM('}Groups', vIndexI);\r\n\t\tIf (vGroup @<> 'Admin' & vGroup @<> 'DataAdmin' & vGroup @<> 'SecurityAdmin');\r\n\t\t\tCellPutS('NONE', cAppElementSecurityCube, pAppId, vGroup);\r\n\t\t\tCellPutS('NONE', cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\n\t\tEndIf;\r\n\t\r\n\t\tvIndexI = vIndexI + 1;\r\n\tEnd;\r\nElse;\r\n\r\n\t#***\r\n\tvAppSubset = 'temp_app_' | pAppId;\r\n\tvAppDim = '}tp_intermediate_security_applications';\r\n\tIF (SubsetExists(vAppDim, vAppSubset)>0);\r\n\t\tSubsetDestroy(vAppDim, vAppSubset);\r\n\tEndIf;\r\n\tSubsetCreate(vAppDim, vAppSubset);\r\n\tSubsetElementInsert(vAppDim, vAppSubset, pAppId, 1);\r\n\t#***\r\n\r\n\tcApprovalDimSize = DIMSIZ(cApprovalDim);\r\n\tcApprovalSubsetSize = SubsetGetSize(cApprovalDim, cApprovalSubset);\r\n\t\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check permission cube');\r\n\tEndIf;\r\n\t\r\n\tcPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\tIf (CubeExists(cPermissionCube) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cPermissionCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check cell level security cube');\r\n\tEndIf;\r\n\r\n\tcCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\r\n\tIf (CubeExists(cCellSecurityCube) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube',\r\n\t\t'pGuid', pExecutionId,\r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cCellSecurityCube,\r\n\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tStringGlobalVariable('gTopNode');\r\n\tNumericGlobalVariable('gTopLevel');\r\n\t\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_top_node',\r\n\t'pExecutionId', pExecutionId, 'pDim', cApprovalDim, 'pSubset', cApprovalSubset);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t'tp_get_top_node', gTopNode, NumberToString(gTopLevel));\r\n\tEndIf;\r\n\r\n\t#*** Zero out the values in cubes that are not in the approval subset\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out the values in cubes that are not in the approval subset');\r\n\tEndIf;\r\n\r\n\tcElementSecurityCube = '}ElementSecurity_' | cShadowApprovalDim;\r\n\tcElementSecurityCubeOnApproval = '}ElementSecurity_' | cApprovalDim;\r\n\r\n\tcPermissionsDim = cControlPrefix | 'tp_permissions';\r\n\tcPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\n\tcCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\r\n\r\n\t#* Zero out cell security cube\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out cell security cube');\r\n\tEndIf;\r\n\r\n\tIF (pIncremental @= 'N');\r\n\t\tvAllView = 'tp_all_cell_security_view_' | pExecutionId;\r\n\t\tViewCreate(cCellSecurityCube, vAllView);\r\n\t\tViewColumnDimensionSet(cCellSecurityCube, vAllView, '}Groups', 1);\r\n\t\tViewRowDimensionSet(cCellSecurityCube, vAllView, cShadowApprovalDim, 1);\r\n\t\tViewTitleDimensionSet(cCellSecurityCube, vAllView, cPermissionsDim);\r\n\r\n\t\tViewZeroOut(cCellSecurityCube, vAllView);\r\n\t\tViewDestroy(cCellSecurityCube, vAllView);\r\n\tEndIf;\r\n\r\n\t# Zero out RDCLS intermediate cubes for this applications only\r\n\tcubeSeparater = '*';\r\n\tvPosCube = 0;\r\n\tvStringToScan = pCubeInfo;\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\tvFirstElement = 1;\r\n\r\n\r\n\tWhile (vPosCube >0);\r\n\t\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\t\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Udate RDCS cubes pAppId=' | pAppId | ' CubeName=' | vCubeName );\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (vFlagCube @= 'A' );\r\n\t\t\tvRDCLSIntermediateCube = '}tp_intermediate_RDCLS}' | vCubeName;\r\n\t\t\tvIntermediateSecurityMeasureDim = '}tp_intermediate_security_measures';\r\n\t\t\r\n\t\t\t#clear RDCLS intermediate cube for this application only\r\n\t\t\tIF (cubeExists(vRDCLSIntermediateCube) >0);\r\n\t\t\t\tIF (pIncremental @= 'N');\r\n\t\t\t\t\tvAllView = 'tp_temp_RDCLS_view_' | pExecutionId;\r\n\t\t\t\t\tViewCreate(vRDCLSIntermediateCube, vAllView);\r\n\t\t\t\t\tViewColumnDimensionSet(vRDCLSIntermediateCube, vAllView, vIntermediateSecurityMeasureDim, 1);\r\n\t\t\t\t\tViewRowDimensionSet(vRDCLSIntermediateCube, vAllView, cApprovalDim, 1);\r\n\t\t\t\t\tViewTitleDimensionSet(vRDCLSIntermediateCube, vAllView, vAppDim);\r\n\t\t\t\t\tViewSubsetAssign(vRDCLSIntermediateCube, vAllView, vAppDim, vAppSubset);\r\n\t\t\t\t\tViewZeroOut(vRDCLSIntermediateCube, vAllView);\r\n\t\t\t\t\tViewDestroy(vRDCLSIntermediateCube, vAllView);\r\n\t\t\t\tElse;\r\n\t\t\t\t\t#TODO zero out complement subset view\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\r\n\t\tEndIf;\r\n\t\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\t\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\tEnd;\r\n\r\n\t#* TODO Zero out element security intermediate cubes for this application only\r\n\r\n\r\n\t#* Zero out element security cube for shadow approval dimension\r\n\tIF (pIncremental @= 'N');\r\n\t\tvAllView = 'tp_all_elem_security_view_' | pExecutionId;\r\n\t\tViewCreate(cElementSecurityCube, vAllView);\r\n\t\tViewColumnDimensionSet(cElementSecurityCube, vAllView, '}Groups', 1);\r\n\t\tViewRowDimensionSet(cElementSecurityCube, vAllView,cShadowApprovalDim , 1);\r\n\t\tViewZeroOut(cElementSecurityCube, vAllView);\r\n\t\tViewDestroy(cElementSecurityCube, vAllView);\r\n\t\t\r\n\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\tvAllView = 'tp_all_elem_security_view_' | pExecutionId;\r\n\t\t\tViewCreate(cElementSecurityCubeOnApproval, vAllView);\r\n\t\t\tViewColumnDimensionSet(cElementSecurityCubeOnApproval, vAllView, '}Groups', 1);\r\n\t\t\tViewRowDimensionSet(cElementSecurityCubeOnApproval, vAllView,cShadowApprovalDim , 1);\r\n\t\t\tViewZeroOut(cElementSecurityCubeOnApproval, vAllView);\r\n\t\t\tViewDestroy(cElementSecurityCubeOnApproval, vAllView);\r\n\t\tEndif;\r\n\tEndIf;\r\n\r\n\t#* Zero out application element security cube\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Zero out application element security cube');\r\n\tEndIf;\r\n\r\n\tvAppSubset = 'temp_app_' | pAppId;\r\n\tIF (SubsetExists(cApplicationsDim, vAppSubset)>0);\r\n\t\tsubsetDestroy(cApplicationsDim, vAppSubset);\r\n\tEndIf;\r\n\tSubsetCreate(cApplicationsDim, vAppSubset);\r\n\tSubsetElementInsert(cApplicationsDim, vAppSubset, pAppId, 1);\r\n\r\n\tIF (pIncremental @= 'N');\r\n\t\tvAllView = 'tp_all_app_security_view_' | pExecutionId;\r\n\t\tViewCreate(cAppElementSecurityCube, vAllView);\r\n\t\tViewColumnDimensionSet(cAppElementSecurityCube, vAllView, '}Groups', 1);\r\n\t\tViewRowDimensionSet(cAppElementSecurityCube, vAllView,cApplicationsDim , 1);\r\n\t\tViewSubsetAssign(cAppElementSecurityCube, vAllView, cApplicationsDim, vAppSubset);\r\n\t\tViewZeroOut(cAppElementSecurityCube, vAllView);\r\n\t\tViewDestroy(cAppElementSecurityCube, vAllView);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\n#If this is an incremental security update, \r\n#We need to create a temp dimension that records all groups that have new updates\r\nvIncrGroupDim = 'tp_incr_temp_groups_' | pAppId;\r\n\r\nIF (pIncremental @= 'Y');\r\n\tIF (DimensionExists(vIncrGroupDim) >0);\r\n\t\tDimensionDestroy(vIncrGroupDim);\r\n\tEndIf;\r\n\r\n\tDimensionCreate(vIncrGroupDim);\r\nEndIf;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cDataLog;\r\n\r\ncRightView = 'VIEW';\r\ncRightEdit = 'EDIT';\r\ncRightSubmit = 'SUBMIT';\r\ncRightReview = 'REVIEW';\r\ncRightOwn = 'OWN';\r\n\r\ncView = 'VIEW';\r\ncAnnotate = 'ANNOTATE';\r\ncEdit = 'EDIT';\r\ncReject = 'REJECT';\r\ncSubmit = 'SUBMIT';\r\n\r\ncCubeSecurityCube = '}CubeSecurity';\r\ncDimensionSecurityCube = '}DimensionSecurity';\r\ncElementAttributesPrefix = '}ElementAttributes_';\r\n\r\nIF (pReviewerEditOn @= 'T');\r\n\tcReviewerEditOn ='T';\r\nElse;\r\n\tcReviewerEditOn = 'F';\r\nENDIF;\r\n\r\ncViewDepth = NUMBR(vViewDepth);\r\ncReviewDepth = NUMBR(vReviewDepth);\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Security set', cSecuritySet, 'Node', vNode, 'Group', vGroup, 'Right', vRight);\r\nEndIf;\r\n\r\ncNone = 'NONE';\r\ncRead = 'READ';\r\ncWrite = 'WRITE';\r\ncLock = 'WRITE';\r\n\r\n#***\r\nIF (DIMIX('}Groups', vGroup)>0);\r\n\tcGroupPName = DimensionElementPrincipalName('}Groups', vGroup);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Group principal name', cGroupPName);\r\n\tEndIf;\r\nElse;\r\n\tcGroupPName = '';\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Group not found');\r\n\tEndIf;\r\nEndIf;\r\n\r\n#Insert the group into the incr temp group dimension\r\n#then zero out the views on this group\r\nvContinueNodeUpdate = 'Y';\r\nIF (pIncremental @= 'Y' & cGroupPName @<> '');\r\n\r\n\tIF (vNode @= '');\r\n\t\tvContinueNodeUpdate = 'N';\r\n\tEndIf;\r\n\r\n\tIF (DIMIX(vIncrGroupDim, cGroupPName) =0);\r\n\r\n\t\t#create a group subset that contains this group only\r\n\t\tvTempGroupSubset = 'temp_group_' | pAppId;\r\n\t\tvGroupDim = '}Groups';\r\n\t\tIF (SubsetExists(vGroupDim, vTempGroupSubset)>0);\r\n\t\t\tSubsetDestroy(vGroupDim, vTempGroupSubset);\r\n\t\tEndIf;\r\n\t\tSubsetCreate(vGroupDim, vTempGroupSubset);\r\n\t\tSubsetElementInsert(vGroupDim, vTempGroupSubset, cGroupPName, 1);\r\n\r\n\t\t#zero out views for this application and group slice\r\n\t\tvGroupView = 'tp_temp_group_view_' | pExecutionId;\r\n\r\n\t\t#zero out cell security permission cube on this group slice\r\n\t\tViewCreate(cCellSecurityCube, vGroupView);\r\n\t\tViewTitleDimensionSet(cCellSecurityCube, vGroupView, vGroupDim);\r\n\t\tViewSubsetAssign(cCellSecurityCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\tViewRowDimensionSet(cCellSecurityCube, vGroupView, cShadowApprovalDim, 1);\r\n\t\tViewColumnDimensionSet(cCellSecurityCube, vGroupView, cPermissionsDim,1);\r\n\r\n\t\tViewZeroOut(cCellSecurityCube, vGroupView);\r\n\t\tViewDestroy(cCellSecurityCube, vGroupView);\r\n\r\n\t\t#zero out element security on shadow approval dimension on this group slice\r\n\t\tViewCreate(cElementSecurityCube, vGroupView);\r\n\t\tViewColumnDimensionSet(cElementSecurityCube, vGroupView, vGroupDim, 1);\r\n\t\tViewSubsetAssign(cElementSecurityCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\tViewRowDimensionSet(cElementSecurityCube, vGroupView,cShadowApprovalDim , 1);\r\n\t\tViewZeroOut(cElementSecurityCube, vGroupView);\r\n\t\tViewDestroy(cElementSecurityCube, vGroupView);\r\n\r\n\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t#zero out element security on approval dimension on this group slice\r\n\t\t\tViewCreate(cElementSecurityCubeOnApproval, vGroupView);\r\n\t\t\tViewColumnDimensionSet(cElementSecurityCubeOnApproval, vGroupView, vGroupDim, 1);\r\n\t\t\tViewSubsetAssign(cElementSecurityCubeOnApproval, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\t\tViewRowDimensionSet(cElementSecurityCubeOnApproval, vGroupView,cShadowApprovalDim , 1);\r\n\t\t\tViewZeroOut(cElementSecurityCubeOnApproval, vGroupView);\r\n\t\t\tViewDestroy(cElementSecurityCubeOnApproval, vGroupView);\r\n\t\tEndif;\r\n\t\t#***\r\n\t\t#zero out RDCLS intermediate cube on the group and application slice\r\n\t\tcubeSeparater = '*';\r\n\t\tvPosCube = 0;\r\n\t\tvStringToScan = pCubeInfo;\r\n\t\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\r\n\t\tWhile (vPosCube >0);\r\n\t\t\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\t\t\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\t\t\tIf (vFlagCube @= 'A' );\r\n\t\t\t\tvRDCLSIntermediateCube = '}tp_intermediate_RDCLS}' | vCubeName;\r\n\t\t\t\tvIntermediateSecurityMeasureDim = '}tp_intermediate_security_measures';\r\n\t\t\r\n\t\t\t\tIF (cubeExists(vRDCLSIntermediateCube) >0);\r\n\r\n\t\t\t\t\tViewCreate(vRDCLSIntermediateCube, vGroupView);\r\n\t\t\t\t\tViewColumnDimensionSet(vRDCLSIntermediateCube, vGroupView, vIntermediateSecurityMeasureDim, 1);\r\n\t\t\t\t\tViewRowDimensionSet(vRDCLSIntermediateCube, vGroupView, vGroupDim, 1);\r\n\t\t\t\t\tViewSubsetAssign(vRDCLSIntermediateCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\t\t\t\tViewTitleDimensionSet(vRDCLSIntermediateCube, vGroupView, vAppDim);\r\n\t\t\t\t\tViewSubsetAssign(vRDCLSIntermediateCube, vGroupView, vAppDim, vAppSubset);\r\n\t\t\t\t\tViewZeroOut(vRDCLSIntermediateCube, vGroupView);\r\n\t\t\t\t\tViewDestroy(vRDCLSIntermediateCube, vGroupView);\r\n\t\t\t\tEndif;\r\n\t\t\tEndif;\r\n\t\t\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\t\t\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\t\tEnd;\r\n\r\n\t\t#***\r\n\t\t#zero out application element security cube for group and application slice\r\n\t\tViewCreate(cAppElementSecurityCube, vGroupView);\r\n\t\tViewColumnDimensionSet(cAppElementSecurityCube, vGroupView, vGroupDim, 1);\r\n\t\tViewSubsetAssign(cAppElementSecurityCube, vGroupView, vGroupDim, vTempGroupSubset );\r\n\t\tViewRowDimensionSet(cAppElementSecurityCube, vGroupView,cApplicationsDim , 1);\r\n\t\tViewSubsetAssign(cAppElementSecurityCube, vGroupView, cApplicationsDim, vAppSubset);\r\n\t\tViewZeroOut(cAppElementSecurityCube, vGroupView);\r\n\t\tViewDestroy(cAppElementSecurityCube, vGroupView);\r\n\r\n\t\t#Insert this group into the temp dimension\r\n\t\tDimensionElementInsertDirect(vIncrGroupDim, '',cGroupPName ,'N');\r\n\r\n\t\tIF (SubsetExists(vGroupDim, vTempGroupSubset)>0);\r\n\t\t\tSubsetDestroy(vGroupDim, vTempGroupSubset);\r\n\t\tEndif;\r\n\tEndif;\r\nEndif;\r\n\r\nIf (cApprovalDim @<> '' & cGroupPName @<> '' & vContinueNodeUpdate @= 'Y');\r\n\r\n\tIf (DIMIX(cShadowApprovalDim, vNode) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t\t'pErrorDetails', cShadowApprovalDim | ', ' | vNode,\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX('}Groups', vGroup) = 0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_GROUP_NOT_EXIST',\r\n\t\t\t'pErrorDetails', '}Groups' | ', ' | vGroup,\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcNodePName = DimensionElementPrincipalName(cShadowApprovalDim, vNode);\r\n\t\r\n\tIf ((cNodePName @<> gTopNode) & (ELISANC(cShadowApprovalDim, gTopNode, cNodePName) = 0));\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NODE_NOT_EXIST_IN_SUBSET',\r\n\t\t\t'pErrorDetails', cApprovalDim | ', ' | cApprovalSubset | ', ' | cNodePName,\r\n\t\t\t'pControl', pControl);\r\n\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Get node and group principal name', cNodePName, cGroupPName);\r\n\tEndIf;\r\n\t\r\n\t# Give read right to the attributes dimension and cube of the approval dimension\r\n\tcElementAttributes = cElementAttributesPrefix | cShadowApprovalDim;\r\n\tIf (DimensionExists(cElementAttributes) <> 0);\r\n\t\tCellPutS(cRead, cDimensionSecurityCube, cElementAttributes, cGroupPName);\r\n\tEndIf;\r\n\tIf (CubeExists(cElementAttributes) <> 0);\r\n\t\tCellPutS(cRead, cCubeSecurityCube, cElementAttributes, cGroupPName);\r\n\tEndIf;\r\n\t\r\n\t# IF(1)\r\n\t\tIf (DTYPE(cShadowApprovalDim, cNodePName) @= 'C');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Consolidation node', cNodePName);\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Assign rights to self', cNodePName);\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tIf (vRight @= cRightSubmit);\r\n\t\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tIF (cNodePName @<> gTopNode);\r\n\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tElse;\r\n\t\t\t\t\t#Submit rights on top node can reject the top node\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cReject, cGroupPName);\t\t\t\t\t\t\r\n\t\t\t\tEndif;\r\n\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '142:ElementSecurityPut for submit ' | cNodePName | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube, cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval, cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\r\n\t\r\n\t\t\tElseIf (vRight @= cRightReview);\r\n\t\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '169:ElementSecurityPut for review ' | cNodePName | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube, cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval, cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\r\n\t\t\tElseIf (vRight @= cRightView);\r\n\t\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '197:ElementSecurityPut for view ' | cNodePName | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval, cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\r\n\t\t\tEndIf;\r\n\t\r\n\r\n\t\t\t#***\r\n\t\r\n\t\t\tcLevel = ELLEV(cShadowApprovalDim, cNodePName);\r\n\r\n\t\t\t#IF(2)\r\n\t\t\tIf (cLevel > cReviewDepth);\r\n\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Level is greater than review depth: ' | NumberToString(cLevel));\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\r\n\t\t\t\tcReviewDescendantsSubset = 'tp_temp_review_descendants_' | pExecutionId;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Pass review right down, review depth: ' | vReviewDepth);\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\tStringGlobalVariable('gMdxFindDescendants');\r\n\t\r\n\t\t\t\t#IF(2.1)\r\n\t\t\t\tIf ((vRight @= cRightSubmit % vRight @= cRightReview) & (cReviewDepth > 0));\r\n\t\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_mdx_find_descendants', \r\n\t\t\t\t\t\t'pExecutionId', pExecutionId, \r\n\t\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', '', 'pNode', cNodePName, 'pDepth', vReviewDepth, 'pSelf', 'Y');\r\n\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\t\tSubsetDestroy(cShadowApprovalDim, cReviewDescendantsSubset);\r\n\t\t\t\t\tSubsetCreateByMDX(cReviewDescendantsSubset, gMdxFindDescendants);\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cReviewDescendantsSubset);\r\n\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\tcReviewDescendantsSubsetSize = SubsetGetSize(cShadowApprovalDim, cReviewDescendantsSubset);\r\n\t\t\t\t\tvIndex = 1;\r\n\t\t\t\t\tWhile (vIndex <= cReviewDescendantsSubsetSize);\r\n\t\t\t\t\t\tvReadOrWrite = cRead;\r\n\t\t\t\t\t\tvElement = SubsetGetElementName(cShadowApprovalDim, cReviewDescendantsSubset, vIndex);\r\n\t\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\r\n\t\t\t\t\t\t#IF(2.1.1)\r\n\t\t\t\t\t\tIf (vElementPName @<> cNodePName);\r\n\t\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#***Add additional privileges with reviewer edit on\r\n\t\t\t\t\t\t\t#IF(2.1.1.1)\r\n\t\t\t\t\t\t\tIf (cReviewerEditOn @= 'T');\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t\tIf (DTYPE(cShadowApprovalDim, vElementPName) @<> 'C');\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cLock;\r\n\t\r\n\t\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cWrite;\r\n\t\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.1.1.1)\r\n\t\t\t\t\t\t\tElse;\r\n\t\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.1.1.1)\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t\t\t\t'306:ElementSecurityPut for ' | vElementPName | ',' | vRight | ',' | vReadOrWrite | ',' |  cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIf ( cCellValue @<> vReadOrWrite);\r\n \t\t\t\t\t\t\t\tIf (vReadOrWrite @= cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cWrite & cCellValue @<> cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cRead & cCellValue @<>cLock & cCellValue @<> cWrite);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tEndif;\r\n\t\t\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\r\n\t\t\t\t\t\t#IF(2.1.1)\r\n\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\tvIndex = vIndex +1;\r\n\t\t\t\t\tEnd;\r\n\t\r\n\t\t\t\t\tSubsetDestroy(cShadowApprovalDim, cReviewDescendantsSubset);\r\n\t\r\n\r\n\t\t\t\t#IF(2.1)\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t#IF(2)\r\n\t\t\tElse;\r\n\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Level is less than or equal to review depth: ' | NumberToString(cLevel));\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t#IF(2.2)\r\n\t\t\t\tIf ((vRight @= cRightSubmit % vRight @= cRightReview));\r\n\t\r\n\t\t\t\t\tvIndex = 1;\r\n\t\t\t\t\tWhile (vIndex <= cApprovalDimSize);\r\n\t\t\t\t\t\tvReadOrWrite = cRead;\r\n\t\t\t\t\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\t\t\t\t#IF(2.2.1)\r\n\t\t\t\t\t\tIf (ELISANC(cShadowApprovalDim, cNodePName, vElement) = 1);\r\n\t\t\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#***Add additional privileges with reviewer edit on\r\n\t\t\t\t\t\t\t#IF(2.2.1.1)\r\n\t\t\t\t\t\t\tIf (cReviewerEditOn @= 'T');\r\n\t\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t\tIf (DTYPE(cShadowApprovalDim, vElementPName) @<> 'C');\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cLock;\r\n\t\r\n\t\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\tvReadOrWrite = cWrite;\r\n\t\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.2.1.1)\r\n\t\t\t\t\t\t\tElse;\r\n\t\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#IF(2.2.1.1)\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t\t\t\t'392:ElementSecurityPut for ' | vElementPName | ',' | vRight | ',' | vReadOrWrite | ',' |  cGroupPName);\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIf ( cCellValue @<> vReadOrWrite);\r\n \t\t\t\t\t\t\t\tIf (vReadOrWrite @= cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cWrite & cCellValue @<> cLock);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube , vElementPName, cGroupPName);\t\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\r\n\t\t\t\t\t\t\t\tIf (vReadOrWrite @= cRead & cCellValue @<>cLock & cCellValue @<> cWrite);\r\n\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCube, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\t\t\tCellPutS(vReadOrWrite, cElementSecurityCubeOnApproval, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\t\t\tEndif;\r\n\t\t\r\n\t\t\t\t\t\t\tEndif;\r\n\t\r\n\t\t\t\t\t\t#IF(2.2.1)\r\n\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\t\tEnd;\r\n\t\r\n\t\t\t\t#IF(2.2)\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t#IF(2)\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\t#***\r\n\t\r\n\t\t\t#IF(3)\r\n\t\t\tIf (((vRight @= cRightSubmit % vRight @= cRightReview) & (cViewDepth > cReviewDepth)) %\r\n\t    \t\t(vRight @= cRightView));\r\n\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Pass View right down, view depth: ' | vViewDepth);\r\n\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t#IF(3.1)\r\n\t\t\t\tIf (cLevel > cViewDepth);\r\n\t\r\n\t\t\t\tcViewDescendantsSubset = 'tp_temp_view_descendants_' | pExecutionId;\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_mdx_find_descendants', \r\n\t\t\t\t\t'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', '', 'pNode', cNodePName, 'pDepth', vViewDepth, 'pSelf', 'Y');\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tSubsetDestroy(cShadowApprovalDim, cViewDescendantsSubset);\r\n\t\t\t\tSubsetCreateByMDX(cViewDescendantsSubset, gMdxFindDescendants);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t'pDim', cShadowApprovalDim, 'pSubset', cViewDescendantsSubset);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tcViewDescendantsSubsetSize = SubsetGetSize(cShadowApprovalDim, cViewDescendantsSubset);\r\n\t\t\t\tvIndex = 1;\r\n\t\t\t\tWhile (vIndex <= cViewDescendantsSubsetSize);\r\n\t\t\t\t\tvElement = SubsetGetElementName(cShadowApprovalDim, cViewDescendantsSubset, vIndex);\r\n\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\r\n\t\t\t\t\tIf (vElementPName @<> cNodePName);\r\n\t\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\tIf ( cCellValue @= '' % cCellValue @= cNone);\r\n\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCubeOnApproval , vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tEndif;\r\n\r\n\t\r\n\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\tvIndex = vIndex +1;\r\n\t\t\t\tEnd;\r\n\t\r\n\t\t\t\tSubsetDestroy(cShadowApprovalDim, cViewDescendantsSubset);\r\n\t\r\n\t\t\t#IF(3.1)\r\n\t\t\tElse;\r\n\t\r\n\t\t\t\tvIndex = 1;\r\n\t\t\t\tWhile (vIndex <= cApprovalDimSize);\r\n\t\t\t\t\tvElement = DIMNM(cShadowApprovalDim, vIndex);\r\n\t\t\t\t\t#IF(3.1.1)\r\n\t\t\t\t\tIf (ELISANC(cShadowApprovalDim, cNodePName, vElement) = 1);\r\n\t\t\t\t\t\tvElementPName = DimensionElementPrincipalName(cShadowApprovalDim, vElement);\r\n\t\t\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cSubmit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cReject, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cEdit, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '');\r\n\t\t\t\t\t\t\tCellPutS(cNone, cCellSecurityCube, vElementPName, cAnnotate, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvCellValue = CellGetS(cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\t\t\t\tCellPutS(cRead, cCellSecurityCube, vElementPName, cView, cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t\t\t\t\t\t\t\t'499:ElementSecurityPut for ' | vElementPName | ',' | vRight | ',' | cRead | ',' | cGroupPName);\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tcCellValue = CellGetS(cElementSecurityCube , vElementPName, cGroupPName);\r\n\t\t\t\t\t\tIf ( cCellValue @= '' % cCellValue @= cNone);\r\n\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCube, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\t\t\t\tCellPutS(cRead, cElementSecurityCubeOnApproval, vElementPName, cGroupPName);\r\n\t\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\r\n\t\t\t\t\t#IF(3.1.1)\r\n\t\t\t\t\tEndIf;\r\n\t\t\r\n\t\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\tEnd;\r\n\t\r\n\t\t\t#IF(3.1)\r\n\t\t\tEndIf;\r\n\t\r\n\t\t#IF(3)\r\n\t\tElse;\r\n\t\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'No need to pass View right down, view depth: ' | vViewDepth);\r\n\t\t\tEndIf;\r\n\t\r\n\t\t#IF(3)\r\n\t\tEndIf;\r\n\t\r\n\t# IF(1)\r\n\tElse;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Leaf node', cNodePName);\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (vRight @= cRightSubmit);\r\n\t\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '551:ElementSecurityPut for ' | cNodePName | ',' | vRight | ',' | cRead | ',' | cGroupPName);\r\n\t\t\tEndIf;\r\n\r\n\t\t\tCellPutS(cLock, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\tCellPutS(cLock, cElementSecurityCubeOnApproval , cNodePName, cGroupPName);\r\n\t\t\tEndif;\r\n\t\tElseIf (vRight @= cRightEdit);\r\n\t\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '582:ElementSecurityPut for ' | cNodePName | ',' | vRight | ',' | cWrite | ',' | cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tcCellValue = CellGetS(cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\tIf ( cCellValue @<> cLock);\r\n\t\t\t\tCellPutS(cWrite, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cWrite, cElementSecurityCubeOnApproval , cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\t\tEndIf;\r\n\t\r\n\t\tElseIf (vRight @= cRightView);\r\n\t\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cSubmit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cReject, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cEdit, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tIf (vCellValue @= '');\r\n\t\t\t\tCellPutS(cNone, cCellSecurityCube, cNodePName, cAnnotate, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tvCellValue = CellGetS(cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tIf (vCellValue @= '' % CODE(vCellValue, 1) <> CODE(cRead, 1));\r\n\t\t\t\tCellPutS(cRead, cCellSecurityCube, cNodePName, cView, cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '609:ElementSecurityPut for ' | cNodePName | ',' | vRight | ',' | cRead | ',' | cGroupPName);\r\n\t\t\tEndIf;\r\n\t\t\tcCellValue = CellGetS(cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\tIf ( cCellValue @<> cLock & cCellValue @<> cWrite);\r\n\t\t\t\tCellPutS(cRead, cElementSecurityCube , cNodePName, cGroupPName);\r\n\t\t\t\tIF (cSecurityMethod @= cElementSecurity);\r\n\t\t\t\t\tCellPutS(cRead, cElementSecurityCubeOnApproval , cNodePName, cGroupPName);\r\n\t\t\t\tEndif;\r\n\t\t\tEndIf;\r\n\t\r\n\t\tEndIf;\r\n\t\r\n\t# IF(1)\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n#***\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Make Application element readable for group', cGroupPName);\r\nEndIf;\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\nIf (vRight @= cRightView % vRight @= cRightEdit % vRight @= cRightReview % vRight @= cRightSubmit);\r\n\tCellPutS(cRead, cAppElementSecurityCube, pAppId, cGroupPName);\r\n\t\r\n\t# For Central applications view right is equivalent to own right\r\n\tIf (cApprovalDim @= '' & vRight @= cRightView);\r\n\t\tCellPutS(cRead, cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\n\tEndIf;\r\nElseIf (vRight @= cRightOwn);\r\n\tCellPutS(cRead, cAppElementSecurityCube, pAppId, cGroupPName);\r\n\tCellPutS(cRead, cAppPermSecurityCube, pAppId, cOwnPermissionElement, vGroup);\r\nEndIf;\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Starting epilog.');\r\nEndIf;\r\n\r\n#***\r\nIF (SubsetExists(cVersionDim, vVersionSubset) >0);\r\n\tSubsetDestroy(cVersionDim, vVersionSubset);\r\nEndif;\r\n\r\nIF (SubsetExists(vAppDim, vAppSubset) >0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndif;\r\n\r\nIF (SubsetExists(cApplicationsDim, vAppSubset) >0);\r\n\tsubsetDestroy(cApplicationsDim, vAppSubset);\r\nEndif;\r\n\r\n#***\r\n#If using element security is enforced by rule on the approval dimension\r\n#We need to call SecurityRefresh after rights saving\r\ncConfigAttrCube = '}ElementAttributes_}tp_config';\r\nvEnforceElementSecurityOnApproval = CellGetS(cConfigAttrCube, 'EnableElementSecurityOnApproval', 'String Value');\r\ncApplicationAttrCube = '}ElementAttributes_}tp_applications';\r\nvSecurityMethod = CellGetS(cApplicationAttrCube, pAppId, 'SecurityMethod');\r\nIF (vEnforceElementSecurityOnApproval @= 'Y' & vSecurityMethod @= 'CELL_SECURITY');\r\n\tSecurityRefresh();\r\nEndif;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": {
        "Type": "ASCII",
        "asciiDecimalSeparator": ".",
        "asciiDelimiterChar": ",",
        "asciiDelimiterType": "Character",
        "asciiHeaderRecords": 0,
        "asciiQuoteCharacter": "\"",
        "asciiThousandSeparator": ",",
        "dataSourceNameForClient": "dummy.txt",
        "dataSourceNameForServer": "dummy.txt"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pReviewerEditOn",
            "Prompt": "",
            "Value": "F",
            "Type": "String"
        },
        {
            "Name": "pSourceFile",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pCubeInfo",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pIncremental",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [
        {
            "Name": "vNode",
            "Type": "String",
            "Position": 1,
            "StartByte": 0,
            "EndByte": 0
        },
        {
            "Name": "vGroup",
            "Type": "String",
            "Position": 2,
            "StartByte": 0,
            "EndByte": 0
        },
        {
            "Name": "vRight",
            "Type": "String",
            "Position": 3,
            "StartByte": 0,
            "EndByte": 0
        },
        {
            "Name": "vViewDepth",
            "Type": "String",
            "Position": 4,
            "StartByte": 0,
            "EndByte": 0
        },
        {
            "Name": "vReviewDepth",
            "Type": "String",
            "Position": 5,
            "StartByte": 0,
            "EndByte": 0
        }
    ],
    "Attributes": {
        "Caption": "}tp_add_user_security_from_file"
    }
}