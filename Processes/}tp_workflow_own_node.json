{
    "Name": "}tp_workflow_own_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\ncDisplayUserName = ATTRS('}Clients', pNewOwnerID, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = pNewOwnerID;\r\nEndIf;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Current user is ' | cDisplayUserName);\r\nEndIf;\r\n\r\n#*** \r\n\r\nif (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf(CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\n#constant\r\ncLocked = '4';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\n\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncBeingEdited = 'BeingEdited';\r\n\r\n#****\r\nStringGlobalVariable('gShowBouncingMessage');\r\nStringGlobalVariable('gBouncingType');\r\ngShowBouncingMessage = 'N';\r\ngBouncingType = 'OWN';\r\n#****\r\n\r\nIf (cShadowApprovalDim @<> '');\r\n\tpNode = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\nEndIf;\r\n\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @='N');\r\n\r\n\tcStateValue = CellGetS(cStateCube, cStateMember, cState);\r\n\tvOwnerId = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\r\n\tIf (pNewOwnerID @<> vOwnerId % cStateValue @<> cWorkInProgress);\r\n\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Check node state');\r\n\t\tEndIf;\r\n\r\n\t\tIf (cStateValue @= cLocked);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t\t'pErrorDetails', 'Own' | ', ' | pNode | ', ' | cStateValue,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\t\t#*** \r\n\t\tIf (cShadowApprovalDim @<> '');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check user privilege');\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions', \r\n\t\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', pNode, 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\r\n\t\t\tIf (gEdit @= 'F');\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t\t\t\t'pErrorDetails', 'EDIT' | ', ' | pNode,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\t#***\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Get current ownerID and ownershipNode');\r\n\t\tEndIf;\r\n\t\t\r\n\t\tvOwnerIdToBounce = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\t\tvOwnershipNodeToBounce = CellGetS(cStateCube, cStateMember, cTakeOwnershipNode);\r\n\r\n\t\tIF (pNewOwnerID @<> vOwnerId & cStateValue @= cWorkInProgress & pCheckBouncingOnly @= 'Y');\r\n\r\n\t\t\tIF ((pBouncingMode @= 'ALWAYS' % pBouncingMode @='ACTIVE'));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\tvEdited = CellGetS(cStateCube, cStateMember, cBeingEdited);\r\n\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'NODE_OWNER_ACTIVE',\r\n\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\tElseIf (pBouncingMode @= 'ALWAYS');\r\n\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t'pErrorCode', 'NODE_OWNER_INACTIVE',\r\n\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t'pControl', pControl);\t\r\n\t\t\t\t\tgShowBouncingMessage = 'Y';\t\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tElseIf (pCheckBouncingOnly @= 'N');\r\n\t\t\tIf (cShadowApprovalDim @= '' & vOwnerIdToBounce @<> '');\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Bounce central owner ' | vOwnerIdToBounce);\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', vOwnerIdToBounce, 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\t\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Reserve owner data slice');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'Y', 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#*** \r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Set owner');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cCurrentOwner);\r\n\t\t\tCellPutS(pNewOwnerID, cStateCube, cStateMember, cCurrentOwnerId);\r\n\t\t\tIf (cShadowApprovalDim @<> '');\r\n\t\t\t\tCellPutS(pNode, cStateCube, cStateMember, cTakeOwnershipNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#***\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Add being edited');\r\n\t\t\tEndIf;\r\n\t\t\r\n\t\t\t#If new owner is not the current user, then it is part of reject action that returns the ownership back\r\n\t\t\t#to original owner, don't set BeingEdited and StartEditingDate fields for that scenario\r\n\t\t\tIF (pNewOwnerId @=TM1User);\r\n\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\tCellPutS('Y', cStateCube, cStateMember, cBeingEdited);\r\n\r\n\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStartEditingDate);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#***\t\t\r\n\t\t\tIf (cShadowApprovalDim @= '');\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Set state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(cWorkInProgress, cStateCube, cStateMember, cState);\r\n\t\t\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cStateChangeUser);\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\t\t\tElseIf (cStateValue @<> cWorkInProgress);\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', pNode, 'pPrivilege', 'EDIT','pUpdateAncestorState', 'Y', 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tElse;\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Update state change time');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\r\n\t\tIf (cShadowApprovalDim @<> '' & vOwnerIdToBounce @<> '' & vOwnershipNodeToBounce @<> '' & gShowBouncingMessage @= 'N');\r\n\t\t\r\n\t\t\t#Don't bounce myself on the same leaf node\r\n\t\t\tIf (vOwnerIdToBounce @= pNewOwnerId & vOwnershipNodeToBounce @= pNode);\r\n\r\n\t\t\tElse;\r\n\t\t\t\t# Bounce related nodes\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t'pOwnerIdToBounce', vOwnerIdToBounce, 'pOwnershipNodeToBounce', vOwnershipNodeToBounce,'pSourceNode', pNode,\r\n \t\t\t\t\t'pTime', pTime,'pCheckBouncingOnly', pCheckBouncingOnly,'pBouncingMode', pBouncingMode, 'pParentTIUpdateStateCube','N', 'pControl', pControl);\r\n\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n# Take ownership on consolidation\r\nElse;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\t# Take care of the leaf nodes in the package\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubsetLeafChildren = 'takeOwnership_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tvUpdateAncestorState = 'Y';\r\n\tvParentTIUpdateStateCube='N';\r\n\tIf (vSize > 100);\r\n\t\tvUpdateAncestorState = 'N';\r\n\t\tvParentTIUpdateStateCube = 'Y';\r\n\tEndIf;\r\n\r\n\tvInactiveLeaf = 'N';\r\n\tlooper = vSize;\r\n\tvLeafOwnedAtRightLevel = 0;\r\n\tWhile (looper >= 1);\r\n\t\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\r\n\t\t# leaf node, not the dummy node\r\n\t\tIf (vLeafChild @<> pNode);\r\n\r\n\t\t\t#check permission\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check user privilege');\r\n\t\t\tEndIf;\r\n\r\n\t\t\tStringGlobalVariable('gEdit');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions',\r\n\t\t\t'pGuid', pExecutionId, 'pApplication', pAppId, 'pNode', vLeafChild, 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\t# must have EDIT privilege to take ownership\r\n\t\t\tIf (gEdit @= 'T');\r\n\t\t\t\tcStateValue = CellGetS(cStateCube, vLeafChild, cState);\r\n\r\n\t\t\t\t# skip submitted node\r\n\t\t\t\tIf (cStateValue @<> cLocked);\r\n\t\t\t\t\t\r\n\t\t\t\t\t#*****'\r\n\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\tTextOutput(cTM1Log, 'Get current owner and ownership node');\r\n\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\tvOwnerIdToBounce = CellGetS(cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\t\tvOwnershipNodeToBounce = CellGetS(cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\r\n\t\t\t\t\tIf (vOwnerIdToBounce @<> pNewOwnerID % vOwnershipNodeToBounce @<> pNode);\r\n\t\t\t\t\t\tIF (pNewOwnerID @<> vOwnerId & cStateValue @= cWorkInProgress & pCheckBouncingOnly @= 'Y');\r\n\r\n\t\t\t\t\t\t\tIF (pBouncingMode @= 'ALWAYS' % pBouncingMode @='ACTIVE');\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t#bouncing messages for taking ownership action\r\n\t\t\t\t\t\t\t\tvEdited = CellGetS(cStateCube,  vLeafChild, cBeingEdited);\r\n\t\t\t\t\t\t\t\tIf (vEdited @= 'Y');\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t\t\t\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t\t\t\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t\t\t\t\t\t\t'pErrorCode', 'NODE_OWNER_ACTIVE',\r\n\t\t\t\t\t\t\t\t\t\t'pErrorDetails', pAppId,\r\n\t\t\t\t\t\t\t\t\t\t'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\t\t\t\t\t\tvInactiveLeaf = 'N';\r\n\t\t\t\t\t\t\t\t\tlooper = 1;\r\n\t\t\t\t\t\t\t\tElseIf (pBouncingMode @= 'ALWAYS');\r\n\t\t\t\t\t\t\t\t\tgShowBouncingMessage = 'Y';\r\n\t\t\t\t\t\t\t\t\tvInactiveLeaf = 'Y';\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tElseIf (pCheckBouncingOnly @= 'N');\r\n\r\n\t\t\t\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Set new owner');\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tCellPutS(cDisplayUserName, cStateCube, vLeafChild, cCurrentOwner);\r\n\t\t\t\t\t\t\tCellPutS(pNewOwnerID, cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\t\t\t\tCellPutS(pNode, cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Add being edited');\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t#If new owner is not the current user, then it is part of reject action that returns the ownership back\r\n\t\t\t\t\t\t\t#to original owner, don't set BeingEdited and StartEditingDate fields for that scenario\t\t\r\n\t\t\t\t\t\t\tIf (pNewOwnerId @=TM1User);\r\n\t\t\t\t\t\t\t\tcBeingEdited = 'BeingEdited';\r\n\t\t\t\t\t\t\t\tCellPutS('Y', cStateCube, vLeafChild, cBeingEdited);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tcStartEditingDate = 'StartEditingDate';\r\n\t\t\t\t\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cStartEditingDate);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t#rollup sandboxes to the ownership node\r\n\t\t\t\t\t\t\t\tvTotalSandbox = ServerSandboxListCountGet;\r\n\t\t\t\t\t\t\t\tvSandboxLooper = vTotalSandbox;\r\n\t\t\t\t\t\t\t\tvLookupString = '_[' | cShadowApprovalDim | '].[' | vleafChild | ']_' | pAppId;\r\n\r\n\t\t\t\t\t\t\t\tWhile (vSandboxLooper >=1);\r\n\t\t\t\t\t\t\t\t\tvLeafSandbox = ServerSandboxGet(vSandboxLooper);\r\n\t\t\t\t\t\t\t\t\tvStartPos = SCAN(vLookupString, vLeafSandbox);\r\n\t\t\t\t\t\t\t\t\tvDisplayName = SUBST(vLeafSandbox, 1, vStartPos -1);\r\n\t\t\t\t\t\t\t\t\tIF (vStartPos >0);\r\n\t\t\t\t\t\t\t\t\t\t vParentSandbox = vDisplayName |  '_[' | cShadowApprovalDim | '].[' | pNode | ']_' | pAppId;\r\n\t \t \t \t \t \t \t \t \t \t IF (ServerSandboxExists(vParentSandbox) =0);\r\n\t\t \t \t \t \t \t \t \t \t \t ServerSandboxCreate(vParentSandbox);\r\n\t \t \t \t \t \t \t \t \t \t EndIf;\r\n\t \t \t \t \t \t \t \t \t \t ServerSandboxMerge(vLeafSandbox, vParentSandbox);\r\n \t  \t  \t  \t  \t  \t  \t  \t  \t  \t ServerSandboxesDelete('client:=:' | TM1User | ', name:=:' | vLeafSandbox);\r\n\r\n\t\t\t\t\t\t\t\t\tEndIf;\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tvSandboxLooper = vSandboxLooper -1;\t\r\n\t\t\t\t\t\t\t\tEnd;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cStateValue @<> cWorkInProgress);\r\n\t\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\r\n\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId,\r\n\t\t\t\t\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vLeafChild, 'pPrivilege', 'EDIT', 'pUpdateAncestorState', vUpdateAncestorState,'pControl', pControl);\r\n\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Update state change time');\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tCellPutS(pTime, cStateCube, vLeafChild, cStateChangeDate);\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\t#***\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, 'Bounce related nodes');\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\tIf (vOwnerIdToBounce @<> '' & vOwnershipNodeToBounce @<> '' & gShowBouncingMessage @= 'N');\r\n\r\n\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_bounce_nodes', 'pExecutionId', pExecutionId,'pAppId', pAppId,\r\n\t\t\t\t\t\t\t\t'pOwnerIdToBounce', vOwnerIdToBounce, 'pOwnershipNodeToBounce', vOwnershipNodeToBounce,\r\n\t\t\t\t\t\t\t\t'pSourceNode', pNode, 'pTime', pTime, 'pCheckBouncingOnly', pCheckBouncingOnly,'pBouncingMode', pBouncingMode,  'pParentTIUpdateStateCube',vParentTIUpdateStateCube,'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\tEndIf;\r\n\r\n\t\t\t\t\t\t\tIF (pCheckBouncingOnly @= 'Y' & gShowBouncingMessage @='Y');\r\n\t\t\t\t\t\t\t\tlooper = 1;\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\t\r\n\tIf (vInactiveLeaf @= 'Y');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'NODE_OWNER_INACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\t\r\n\tEndIf;\r\n\r\n\tIf (pCheckBouncingOnly @= 'N');\r\n\t\tIf (vLeafOwnedAtRightLevel = 0);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pExecutionId, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t\t\t'pErrorDetails', 'Own' | ', ' | pNode,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Update consolidated node state change time');\r\n\t\tEndIf;\r\n\t\tCellPutS(pTime, cStateCube, pNode, cStateChangeDate);\r\n\r\n\t\t#****\r\n\r\n\t\t#If we didn't update ancestors' state for an individual leaf node, we must update state cube for all consolidated nodes now\r\n\t\tIF (vUpdateAncestorState @= 'N');\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId, 'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndif;\r\n\t\r\n\t\t#***\r\n\t\t# At last, take care of the consolidated nodes in the package\r\n\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'Y', 'pUser', pNewOwnerID, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndif;\r\n\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\nSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\nENDIF;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pTime",
            "Prompt": "",
            "Value": "0",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pNode",
            "Prompt": "",
            "Value": "NA",
            "Type": "String"
        },
        {
            "Name": "pNewOwnerID",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pCheckBouncingOnly",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        },
        {
            "Name": "pBouncingMode",
            "Prompt": "",
            "Value": "NEVER",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_workflow_own_node"
    }
}