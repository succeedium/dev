{
    "Name": "}tp_update_ownership",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pGuid,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pGuid, pAppId,  pControl);\r\nEndIf;\r\n\r\n#*** Check application\r\n\r\ncApplicationsDim = cControlPrefix |  'tp_applications';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_DIM_NOT_EXIST',\r\n\t\t'pErrorDetails', cApplicationsDim, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, cApplicationsDim | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (DIMIX(cApplicationsDim, pAppId) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_NODE_NOT_EXIST',\r\n\t\t'pErrorDetails', pAppId, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, pAppId | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** Check State cube\r\nvStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\nvNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\nIf (CubeExists(vStateCube) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', vStateCube, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Cube ' | vStateCube | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\n#* Check permission cube\r\ncPermissionCube = cControlPrefix | 'tp_application_permission}' | pAppId;\r\ncCellSecurityCube = '}CellSecurity_' | cPermissionCube;\r\n\r\nIf (CubeExists(cPermissionCube) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cPermissionCube, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Cube ' | cPermissionCube | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (CubeExists(cCellSecurityCube) = 0);\r\n\tExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pGuid, \r\n\t\t'pProcess', cTM1Process,\r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cCellSecurityCube, \r\n\t\t'pControl', pControl);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Cube ' | cCellSecurityCube | ' does not exist.');\r\n\tEndIf;\r\n\tProcessError;\r\nEndIf;\r\n\r\n#* Get Approval dimension and subset\r\n\r\n#*** declare global variables\r\n\r\nvApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', vApprovalDim, cApprovalSubset, cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\n#***\r\n\r\nvSubset = 'currentOwner_' | pGuid;\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\nENDIF;\r\n\r\nvDummyNode = DIMNM(cShadowApprovalDim, 1);\r\n#If a mdx returns zero item, SubsetCreateByMdx will throw an error, add the first element as a dummy member\r\nvMDX = '{ FILTER ( [' | cShadowApprovalDim | '].Members, [' | vStateCube | '].( [' | vNodeInfoDim | '].[CurrentOwner] ) <> \"\" ), [' | cShadowApprovalDim | '].['\r\n\t| vDummyNode | ']} ';\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Mdx to get nodes with current owner: ' | vMDX);\r\nEndIf;\r\nsubsetCreateByMdx(vSubset, vMDX);\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_convert_dynamic_subset_to_static', 'pExecutionId', pGuid,\r\n'pDim',cShadowApprovalDim, 'pSubset', vSubset);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nvSubsetSize = SubsetGetSize(cShadowApprovalDim, vSubset);\r\nlooper =vSubsetSize;\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'subset Size: ' | NumberToString(vSubsetSize));\r\nEndIf;\r\n\r\nvConsolidationOwnershipNodeDim = 'tp_temp_consolidation_ownership_node_' | pGuid;\r\nvConsolidationOwnershipIdDim = 'tp_temp_consolidation_ownership_id_' | pGuid;\r\n\r\nvDummyCount =0;\r\nWHILE (looper >=1);\r\n\tvOwner = '';\r\n\tvNode = '';\r\n\tvNode = SubsetGetElementName (cShadowApprovalDim, vSubset, looper);\r\n\t\r\n\t#***Need to take care of dummy member\r\n\t\r\n\tIF (vNode @= vDummyNode);\r\n\t\tvDummyCount = vDummyCount +1;\r\n\t\t#***If dummy node shows up more than once, it is also a real one\r\n\t\tIF (vDummyCount >1);\r\n\t\t\tvOwner = CellGetS(vStateCube, vNode, 'CurrentOwner');\r\n\t\t\tvCurrentOwnerId = CellGetS(vStateCube, vNode, 'CurrentOwnerId');\r\n\t\tENDIf;\r\n\t\r\n\tELSE;\r\n\t\tvOwner = CellGetS(vStateCube, vNode, 'CurrentOwner');\r\n\t\tvCurrentOwnerId = CellGetS(vStateCube, vNode, 'CurrentOwnerId');\r\n\tENDIF;\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'node: ' | vNode);\r\n\t\tTextOutput(cTM1Log, 'Current Owner: ' | vOwner);\r\n\tENDIF;\r\n\t\r\n\tIF (DIMIX('}Clients', vOwner) = 0);\r\n\t\t#***Node owner doesn't exist in }Clients dimension any more\r\n\t\t#***Reset currentOwner field,\r\n\t\t#***we need a separate TI to take care of ownership whose owner has been deleted\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Current Owner: ' | vOwner | ' does not exist.');\r\n\t\t\tTextOutput(cTM1Log, 'The current owner field for node ' | vNode | ' get reset.');\r\n\t\tENDIF;\r\n\t\tIf (CellIsUpdateable(vStateCube, vNode, 'State') = 0);\r\n\t\t\tvDetail=INSRT('State',')',1);\r\n\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pGuid, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t'pControl', pControl);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwner');\r\n\t\t\r\n\t\tIf (CellIsUpdateable(vStateCube, vNode, 'CurrentOwnerId') = 0);\r\n\t\t\tvDetail=INSRT('CurrentOwnerId',')',1);\r\n\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pGuid, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t'pControl', pControl);\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwnerId');\r\n\t\r\n\tElseIf (DTYPE(cShadowApprovalDim, vNode) @= 'N');\r\n\t\r\n\t\t#***If leaf node: need to revoke ownership as well as clear currentOwer in state cube\r\n\t\r\n\t\tStringGlobalVariable('gEdit');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_user_permissions',\r\n\t\t\t'pGuid', pGuid, 'pApplication', pAppId, 'pNode', vNode, 'pUser', vOwner, 'pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\t\r\n\t\tIf (gEdit @= 'F');\r\n\t\r\n\t\t\t#*** Clear Reservation approval node slice using TM1 data reservation\r\n\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pGuid, \r\n\t\t\t\t'pAppId', pAppId, 'pNode', vNode, 'pApprovalDim', vApprovalDim, 'pReserve', 'N', 'pUser', vCurrentOwnerId, 'pControl', pControl);\r\n\t\t\t\t\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tIf (CellIsUpdateable(vStateCube, vNode, 'CurrentOwner') = 0);\r\n\t\t\t\tvDetail=INSRT('CurrentOwner',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('', vStateCube, vNode, 'CurrentOwner');\r\n\t\t\t\r\n\t\t\tIf (CellIsUpdateable(vStateCube, vNode, 'CurrentOwnerId') = 0);\r\n\t\t\t\tvDetail=INSRT('CurrentOwnerId',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('', vStateCube, vNode, 'CurrentOwnerId');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'No edit permission. The ownership of ' | vNode | ' is revoked from user ' | vOwner);\r\n\t\t\t\tTextOutput(cTM1Log, 'The current owner field for node ' | vNode | ' get reset.');\r\n\t\t\tENDIF;\r\n\r\n\t\t\t# Put TakeOwnershipNode in temp dimension\r\n\t\t\tvTakeOwnershipNode = CellGetS(vStateCube, vNode, 'TakeOwnershipNode');\r\n\t\t\tIf (CellIsUpdateable(vStateCube, vNode, 'TakeOwnershipNode') = 0);\r\n\t\t\t\tvDetail=INSRT('TakeOwnershipNode',')',1);\r\n\t\t\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vNode,vDetail,1);\r\n\t\t\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\t\t\tvDetail=INSRT(vStateCube,vDetail,1);\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t\t'pGuid', pGuid, \r\n\t\t\t\t'pProcess', cTM1Process, \r\n\t\t\t\t'pErrorCode', 'TI_APPLICATION_NOT_UPDATEABLE',\r\n\t\t\t\t'pErrorDetails', vDetail,\r\n\t\t\t\t'pControl', pControl);\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\t\tCellPutS('', vStateCube, vNode, 'TakeOwnershipNode');\r\n\t\t\tIf (vTakeOwnershipNode @<> vNode);\r\n\t\t\t\tIf (DTYPE(cShadowApprovalDim, vTakeOwnershipNode) @<> 'C');\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (DimensionExists(vConsolidationOwnershipNodeDim) = 0);\r\n\t\t\t\t\tDimensionCreate(vConsolidationOwnershipNodeDim);\r\n\t\t\t\t\tDimensionCreate(vConsolidationOwnershipIdDim);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tIf (DIMIX(vConsolidationOwnershipNodeDim, vTakeOwnershipNode) = 0 & vCurrentOwnerId @<> '');\r\n\t\t\t\t\tDimensionElementInsert(vConsolidationOwnershipNodeDim, '', vTakeOwnershipNode, 'S');\r\n\t\t\t\t\tDimensionElementInsert(vConsolidationOwnershipIdDim, '', vTakeOwnershipNode | '}' | vCurrentOwnerId, 'S');\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\r\n\t\tEndIf;\r\n\t\r\n\tElse;\r\n\t\r\n\t\t#***If consolidated node: clear currentOwer in state cube, we don't set owner on a consolidated node\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwner');\r\n\t\tCellPutS('', vStateCube, vNode, 'CurrentOwnerId');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'The current owner field for node ' | vNode | ' get reset.');\r\n\t\tENDIF;\r\n\t\r\n\tEndIf;\r\n\t\r\n\tlooper = looper -1 ;\r\n\r\nEND;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\nIf (SubsetExists(cShadowApprovalDim, vSubset) =1);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubset);\r\nEndIf;\r\n\r\nIf (DimensionExists(vConsolidationOwnershipNodeDim) = 1);\r\n\tDimensionDestroy(vConsolidationOwnershipNodeDim);\r\nEndIf;\r\n\r\nIf (DimensionExists(vConsolidationOwnershipIdDim) = 1);\r\n\tDimensionDestroy(vConsolidationOwnershipIdDim);\r\nEndIf;\r\n\r\n#*** No error\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pGuid",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_update_ownership"
    }
}