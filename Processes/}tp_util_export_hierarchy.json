{
    "Name": "}tp_util_export_hierarchy",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\nDatasourceASCIIDelimiter = char(9);\r\nDatasourceASCIIQuoteCharacter='';\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', pControl);\r\n\t\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tprocessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters: ', \r\n\tpDim, pSubset, pBlob, pControl);\r\nEndIf;\r\n\r\nIf (DimensionExists(pDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (SubsetExists(pDim, pSubset) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\n#***\r\nStringGlobalVariable('gTopNode');\r\nNumericGlobalVariable('gTopLevel');\r\n\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_top_node',\r\n'pExecutionId', pExecutionId, 'pDim', pDim, 'pSubset', pSubset);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), \r\n\t'tp_get_top_node', gTopNode, NumberToString(gTopLevel));\r\nEndIf;\r\n\r\nStringGlobalVariable('gIsInSubset');\r\n\r\ncSubsetSize = SubsetGetSize(pDim, pSubset);\r\ncTopPNode = DimensionElementPrincipalName(pDim, gTopNode);\r\n\r\nvIndex = 1;\r\nWhile (vIndex <= cSubsetSize);\r\n\tvNode = SubsetGetElementName(pDim, pSubset, vIndex);\r\n\tvPNode = DimensionElementPrincipalName(pDim, vNode);\r\n\t\r\n\tvType = DTYPE(pDim, vPNode);\r\n\t\r\n\tvRealParent = '';\r\n\tIf (vPNode @<> cTopPNode);\t\t\r\n\t\tvParentCount = ELPARN(pDim, vPNode);\r\n\t\t\r\n\t\tIf (vParentCount = 1);\r\n\t\t\tvRealParent = ELPAR(pDim, vPNode, 1);\r\n\t\tElse;\r\n\t\t\tvGap = 0;\r\n\t\t\tvParentIndex = 1;\r\n\t\t\tWhile (vParentIndex <= vParentCount);\r\n\t\t\t\tvParent = ELPAR(pDim, vPNode, vParentIndex);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tvParentIndexI = 0;\r\n\t\t\t\tvIndexI = 1;\r\n\t\t\t\tWhile (vIndexI <= cSubsetSize);\r\n\t\t\t\t\tvNodeI = SubsetGetElementName(pDim, pSubset, vIndexI);\r\n\t\t\t\t\tvPNodeI = DimensionElementPrincipalName(pDim, vNodeI);\r\n\t\t\t\t\tIf (vParent @= vPNodeI);\r\n\t\t\t\t\t\tvParentIndexI = vIndexI;\r\n\t\t\t\t\t\tvIndexI = cSubsetSize;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvIndexI = vIndexI + 1;\r\n\t\t\t\tEnd;\r\n\t\t\r\n\t\t\t\tIf (vParentIndexI > 0 & vIndex > vParentIndexI);\r\n\t\t\t\t\tIf (vGap = 0 % vGap > vIndex - vParentIndexI);\r\n\t\t\t\t\t\tvRealParent = vParent;\r\n\t\t\t\t\t\tvGap = vIndex - vParentIndexI;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tvParentIndex = vParentIndex + 1;\r\n\t\t\tEnd;\r\n\t\t\r\n\t\t\tIf (vRealParent @= '');\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n    If (pIncludeWeight @= 'Y');\r\n    \tIf (vRealParent @= '');\r\n    \t\tvWeight = 0.0;\r\n    \tElse;\r\n\t\t\tvWeight = ELWEIGHT(pDim, vRealParent, vPNode);\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tSetOutputCharacterSet(pBlob | '.blb', 'TM1CS_UTF8');\r\n\tIf (pIncludeWeight @= 'Y');\r\n\t\tTextOutput(pBlob | '.blb', vRealParent, vPNode, vType, NumberToString(vWeight));\r\n\tElse;\r\n\t\tTextOutput(pBlob | '.blb', vRealParent, vPNode, vType); \r\n\tEndIf;\r\n\r\n\tvIndex = vIndex + 1;\r\nEnd;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n\r\n\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pDim",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pSubset",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pBlob",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pIncludeWeight",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "Y",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_util_export_hierarchy"
    }
}