{
    "Name": "}tp_deploy_app_cubes_cleanup",
    "HasSecurityAccess": false,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '}';\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', 'Y');\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalSubset');\r\ncAppActive = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'IsActive'); \r\ncVersionDim = ATTRS('}tp_applications', pAppId, 'VersionDimension');\r\ncVersionSlicesWrite =ATTRS('}tp_applications', pAppId, 'VersionSlicesWrite');\r\ncVersionSlicesRead =ATTRS('}tp_applications', pAppId, 'VersionSlicesRead');\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ncCubePropertiesCube = '}CubeProperties';\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\ncApplicationStateCube = cControlPrefix | 'tp_application_state}'|pAppId;\r\n\r\n#***\r\nIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '');\r\n\t#create version subset that contains this version only\r\n\tvVersionSubset = 'temp_app_version' | pAppId;\r\n\tIF (SubsetExists(cVersionDim, vVersionSubset)>0);\r\n\t\tsubsetDestroy(cVersionDim, vVersionSubset);\r\n\tEndif;\r\n\tSubsetCreate(cVersionDim, vVersionSubset);\r\n\tversionSeparater = '|';\r\n\tvPosVersion = 0;\r\n\tvStringToScan = cVersionSlicesWrite;\r\n\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\r\n\tWhile (vPosVersion >0);\r\n\t\tvVersionSlice  = SUBST(vStringToScan, 1, vPosVersion-1);\r\n\t\tIF (DIMIX(cVersionDim, vVersionSlice) >0);\r\n\t\t\tSubsetElementInsert(cVersionDim, vVersionSubset, vVersionSlice, 1);\r\n\t\tElse;\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_error_update_error_cube',\r\n\t\t\t\t'pGuid', pExecutionId,\r\n\t\t\t\t'pProcess', cTM1Process,\r\n\t\t\t\t'pErrorCode', 'TI_WRITABLE_SLICE_NOT_EXISTS',\r\n\t\t\t\t'pErrorDetails', cVersionDim  | '.' | vVersionSlice | ', ' |  pAppId,\r\n\t\t\t\t'pControl', 'Y');\r\n\t\r\n\t\t\tProcessError;\t\t\t\r\n\t\tEndif;\r\n\r\n\t\tvStringToScan = SUBST(vStringToScan, vPosVersion +1, LONG(vStringToScan)-vPosVersion);\r\n\t\tvPosVersion = SCAN(versionSeparater, vStringToScan);\r\n\tEnd;\r\n\r\nEndif;\r\n#***\r\nvAppSubset = 'temp_app_' | pAppId;\r\nvAppDim = '}tp_intermediate_security_applications';\r\nIF (SubsetExists(vAppDim, vAppSubset)>0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndif;\r\nSubsetCreate(vAppDim, vAppSubset);\r\nSubsetElementInsert(vAppDim, vAppSubset, pAppId, 1);\r\n#***\r\n\r\n#clear existing cube flags in case this is a redeployment\r\nvCubeName = pCubeName;\r\nvSecuirtyOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\r\nvRDCellSecurityCube = '}CellSecurity_' | vCubeName;\r\nvRDCLSIntermediateCube = '}tp_intermediate_RDCLS}' | vCubeName;\r\nvIntermediateApplicationsDim = '}tp_intermediate_security_applications';\r\nvIntermediateSecurityMeasureDim = '}tp_intermediate_security_measures';\r\n\r\ncIsAppCube = CellGetS(cApplicationCubesCube, pAppId, vCubeName);\r\n\r\nIf (cIsAppCube @= 'A' % (cApprovalDIM @= '' & cIsAppCube @<> ''));\r\n\r\n\t#***Remove task security cube for this application\r\n\tcTaskSecurityCube = '}tp_task_security}' | pCubeName | '}' | pAppId;\r\n\tCubeDestroy(cTaskSecurityCube);\r\n\r\n\t#check whether this cube is shared by other applications\r\n\tvAppLooper = 1;\r\n\tvIsOtherAppCube = '';\r\n\tvUsedByOtherApp = 'F';\r\n\tvAppDimension = '}tp_applications';\r\n\tvOtherAppIsActive = 'F';\r\n\tvTotalApps = DIMSIZ(vAppDimension);\r\n\tvNewDRMode = '';\r\n\tWhile (vAppLooper <= vTotalApps);\r\n\t\tvOtherAppId = DIMNM(vAppDimension, vAppLooper);\r\n\t\tIF (trim(vOtherAppId) @<> trim(pAppId));\r\n\t\t\tvIsOtherAppCube = CellGetS(cApplicationCubesCube, vOtherAppId, vCubeName);\r\n\t\t\tvOtherAppActive = ATTRS(cControlPrefix | 'tp_applications', vOtherAppId, 'IsActive'); \r\n\t\t\tvOtherAppApprovalDim = ATTRS(cControlPrefix | 'tp_applications', vOtherAppId, 'ApprovalDimension'); \r\n\t\t\tIF (vIsOtherAppCube @= 'A' );\r\n\t\t\t\tvUsedByOtherApp = 'T';\r\n\t\t\t\tIF (vOtherAppActive @= 'Y');\r\n\t\t\t\t\tvOtherAppIsActive = 'T';\r\n\t\t\t\t\tvNewDRMode = ' REQUIREDSHARED';\r\n\t\t\t\tEndif;\r\n \t\t\tElseif (vIsOtherAppCube @='Y' & vOtherAppApprovalDim @='');\r\n\t\t\t\tvUsedByOtherApp = 'T';\r\n\t\t\t\tIF (vOtherAppActive @= 'Y');\r\n\t\t\t\t\tvOtherAppIsActive = 'T';\r\n\t\t\t\t\tvNewDRMode =  'ALLOWED';\r\n\t\t\t\tEndif;\r\n\t\t\tEndif;\r\n\r\n\t\tEndif;\r\n\t\tvAppLooper = vAppLooper +1;\r\n\tEnd;\r\n\r\n\tIF (vUsedByOtherApp @= 'F');\r\n\t\t#remove security overlay cube\r\n\t\tIF (CubeExists(vSecuirtyOverlayCube) = 1);\r\n\t\t\tSecurityOverlayDestroyGlobalDefault(vCubeName);\r\n\t\tEndif;\r\n\r\n\t\t#remove RDCellSecurity cube\r\n\t\t#IF (CubeExists(vRDCellSecurityCube) = 1);\r\n\t\t#\tCellSecurityCubeDestroy (vCubeName);\r\n\t\t#Endif;\r\n\r\n\t\t#remove RDCLS intermediate cube\r\n\t\tIF (CubeExists(vRDCLSIntermediateCube) = 1);\r\n\t\t\tCubeDestroy(vRDCLSIntermediateCube);\r\n\t\tEndif;\r\n\r\n\tElse;\r\n\t\tvDimIndex =1;\r\n\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\tvFoundVersion = 'F';\r\n\t\tWhile (vDimension @<> '');\r\n\t\t\tIF (vDimension @= cVersionDim);\r\n\t\t\t\tvFoundVersion = 'T';\r\n\t\t\tEndIf;\r\n\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\tEnd;\r\n\r\n\t\t#clear security overlay cube for this application only\r\n\t\tIF (CubeExists(vSecuirtyOverlayCube)>0);\r\n\t\t\tvAllView = 'tp_temp_scurity_overlay_view_' | pExecutionId;\r\n\t\t\tViewCreate(vSecuirtyOverlayCube, vAllView);\r\n\t\t\tViewColumnDimensionSet(vSecuirtyOverlayCube, vAllView, '}Groups', 1);\r\n\t\t\tViewRowDimensionSet(vSecuirtyOverlayCube, vAllView, cApprovalDim, 1);\r\n\t\t\tIF (cVersionDim @<> '' & cVersionSlicesWrite @<> '' & vFoundVersion @= 'T' );\r\n\t\t\t\tViewTitleDimensionSet(vSecuirtyOverlayCube, vAllView, cVersionDim);\r\n\t\t\t\tViewSubsetAssign(vSecuirtyOverlayCube, vAllView, cVersionDim, vVersionSubset);\r\n\t\t\tEndif;\r\n\t\t\tViewZeroOut(vSecuirtyOverlayCube, vAllView);\r\n\t\t\tViewDestroy(vSecuirtyOverlayCube, vAllView);\r\n\t\tEndif;\r\n\r\n\r\n\t\t#sync up StaticRights field in intermediate cell security cube\r\n\t\tvReturnValue = ExecuteProcess('}tp_rights_update_RDCLS_static_rights', 'pExecutionId', pExecutionId,\r\n\t\t\t'pAppId', pAppId, 'pCube', pCubeName, 'pApprovalDim', cApprovalDim, 'pUpdateSubset', cApprovalSubset,\r\n\t\t\t'pVersionDim', cVersionDim, 'pGroupsDim', '}Groups');\r\n\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\r\n\tEndif;\r\n\r\n\t# clear the require reservation \r\n\tCellPutS(vNewDRMode, cCubePropertiesCube, vCubeName, 'DATARESERVATIONMODE');\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Reset DR mode in ' | vCubeName);\r\n\tEndIf;\r\n\t\t\t\r\n\t#remove any existing data reservations by this application only\r\n\t#do NOT remove data reservations made by other applications\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, 'pAppId', pAppId, \r\n\t\t'pCube', vCubeName, 'pApprovalDim', '', 'pNode', '', 'pReserve', 'N', 'pUser', '','pControlDim','','pControlWritableSlices', '');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t## clear the flag\r\n\tCellPutS('', cApplicationCubesCube, pAppId, vCubeName);\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#***\r\nIF (SubsetExists(cVersionDim, vVersionSubset) >0);\r\n\tSubsetDestroy(cVersionDim, vVersionSubset);\r\nEndif;\r\n\r\nIF (SubsetExists(vAppDim, vAppSubset) >0);\r\n\tSubsetDestroy(vAppDim, vAppSubset);\r\nEndif;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pCubeName",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_deploy_app_cubes_cleanup"
    }
}