{
    "Name": "}tp_upgrade_security_post_from_v9_5_2_to_v10_1",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\ncControlPrefix = '}';\r\nEndIf;\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\n\r\ncApprovalDIM = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalDimension');\r\ncApprovalSubset = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'ApprovalSubset');\r\ncAppActive = ATTRS(cControlPrefix | 'tp_applications', pAppId, 'IsActive'); \r\n\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\ncTemporaryCubesDimension = cControlPrefix | 'tp_temp_app_cubes_'|pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set flag in application_cubes pAppId=' | pAppId | ' pCubeInfo=' | pCubeInfo );\r\nEndIf;\r\n\r\nIf (DimensionExists(cTemporaryCubesDimension) = 1);\r\n\tDimensionDestroy(cTemporaryCubesDimension);\r\nEndIf;\r\n\r\nDimensionCreate(cTemporaryCubesDimension);\r\n\r\n# parse application cube string and set values in a temporary dimension \r\ncubeSeparater = '*';\r\nvPosCube = 0;\r\nvStringToScan = pCubeInfo;\r\nvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nvFirstElement = 1;\r\n\r\n\r\nWhile (vPosCube >0);\r\n\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\t\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set flag in application_cubes pAppId=' | pAppId | ' CubeName=' | vCubeName | ' Flag=' | vFlagCube);\r\n\tEndIf;\r\n\t\r\n\tIf (vFlagCube @= 'A' % cApprovalDIM @= '');\r\n\t\tDimensionElementInsert(cTemporaryCubesDimension, '', vCubeName, 'S');\r\n\tEndIf;\r\n\t\r\n\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nEnd;\r\n\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tvNumCubes = DIMSIZ(cTemporaryCubesDimension);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The temporary cubes dimension ' | cTemporaryCubesDimension | ' has ' | STR(vNumCubes, 6, 0)  | ' members');\r\n\tvTempCubesIdx = 1;\r\n\tWhile (vTempCubesIdx <= vNumCubes);\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '---------------------------------------');\r\n\t\tvThisCubeName = DIMNM(cTemporaryCubesDimension, vTempCubesIdx);\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), '-------' | vThisCubeName | '-------------');\r\n\t\tvTempCubesIdx = vTempCubesIdx + 1;\r\n\tEnd;\r\nEndIf;\r\n\r\n\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 0;\r\ncCubePropertiesCube = '}CubeProperties';\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\ncApplicationStateCube = cControlPrefix | 'tp_application_state}'|pAppId;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tcLogCubeText = 'Reserve cube number cubes to check' | NumberToString(totalCubes);\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\nEndIf;\r\n\r\nvAppWasAlreadyDeployed = 0;\r\n#clear existing cube flags in case this is a redeployment\r\nWhile (indexCube < totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube+1);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Getting Check Reserve cube flag ' | cCubeName;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tcLogCubeText = 'Reserve flag=' | cIsAppCube;\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\tEndIf;\r\n\r\n\tIf (cIsAppCube @= 'A' % (cApprovalDIM @= '' & cIsAppCube @<> ''));\r\n\t\tvAppWasAlreadyDeployed = 1;\r\n\t\tIf (DIMIX(cTemporaryCubesDimension, cCubeName) < 1);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tcLogCubeText = 'Cube '|cCubeName|' was used by this application but is no longer';\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tcLogCubeText = 'Clear data reservations for cube '|cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tcLogCubeText = 'Clear locks for cube '|cCubeName;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t#remove security overlay cube\r\n\t\t\tvSecuirtyOverlayCube = '}SecurityOverlayGlobal_' | cCubeName;\t\t\t\t\r\n\t\t\tIF (CubeExists(vSecuirtyOverlayCube) = 1);\r\n\t\t\t\tSecurityOverlayDestroyGlobalDefault(cCubeName);\r\n\t\t\tEndif;\r\n\r\n\t\t\t# clear the require reservation lag\r\n\t\t\tCellPutS('', cCubePropertiesCube, cCubeName, 'DATARESERVATIONMODE');\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Data Reservation is no longer required on cube ' | cCubeName);\r\n\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t#remove any existing data reservations\r\n\t\t\tcCubeAddress = '';\r\n\t\t\taddConcatSymbol = 0;\r\n\t\t\tdimensionIndex = 1;\r\n\t\t\tWhile (dimensionIndex > 0 ); \r\n\t\t\t\tcCubeDimensionName = TABDIM(cCubeName, dimensionIndex);\r\n\t\t\t\tIf (cCubeDimensionName @= '');\r\n\t\t\t\t\tdimensionIndex = -1;\r\n\t\t\t\tElse;\r\n\t\t\t\t\tIf (addConcatSymbol > 0);\r\n\t\t\t\t\t\tcCubeAddress = cCubeAddress | '|';\r\n\t\t\t\t\tElse;\r\n\t\t\t\t\t\taddConcatSymbol = 1;\r\n\t\t\t\t\tEndIf; \r\n\t\t\t\tEndIf;\r\n\t\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tcLogCubeText = 'Reserve address = ' | cCubeAddress;\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\t\tEndIf;\r\n\t\t\t\tdimensionIndex = dimensionIndex + 1;\r\n\t\t\tEnd;\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tcLogCubeText = 'Calling CubeDataReservationReleaseAll(' | cCubeName | ',' | cCubeAddress;\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), cLogCubeText);\r\n\t\t\tEndIf;\r\n\t\t\tCubeDataReservationReleaseAll(cCubeName, '', cCubeAddress);\r\n\t\t\t## clear the flag\r\n\t\t\tCellPutS('', cApplicationCubesCube, pAppId, cCubeName);\r\n\t\tEndIf;\r\n\t\t\r\n\tEndIf;\r\n\t\r\n\t\r\n\tindexCube = indexCube + 1;\r\nEnd;\r\n\r\n# parse application cube string and set values in application_cubes cube\r\ncubeSeparater = '*';\r\n\r\ncDataReservationType = '';\r\nIf (cAppActive @= 'Y');\r\n\tcDataReservationType = 'REQUIREDSHARED';\r\n\tIf (cApprovalDIM @= '');\r\n\t\tcDataReservationType = 'ALLOWED';\r\n\tEndIf;\r\nEndIf;\r\n\r\nvPosCube = 0;\r\nvStringToScan = pCubeInfo;\r\nvPosCube = SCAN(cubeSeparater, vStringToScan);\r\n\r\nWhile (vPosCube >0);\r\n\tvCubeName = SUBST(vStringToScan, 1, vPosCube-1);\r\n\tvFlagCube = SUBST(vStringToScan, vPosCube+1, 1);\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Set flag in application_cubes pAppId=' | pAppId | ' CubeName=' | vCubeName | ' Flag=' | vFlagCube);\r\n\tEndIf;\r\n\r\n\tvOldFlagValue = CellGetS(cApplicationCubesCube, pAppId, vCubeName); \r\n\tCellPutS(vFlagCube, cApplicationCubesCube, pAppId, vCubeName);\r\n\t\r\n\tIf (cApprovalDIM @= '' % vFlagCube @= 'A');\r\n\t\t# if this cube uses the approval hierarchy then require reservation to edit\r\n\t\tCellPutS(cDataReservationType, cCubePropertiesCube, vCubeName, 'DATARESERVATIONMODE');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Data Reservation is now ' | cDataReservationType | ' on cube ' | vCubeName);\r\n\t\tEndIf;\r\n\t\t#Add data reservations if this is a new cube there are currently owners of nodes in this application\r\n\t\tIf ((vOldFlagValue @<> vFlagCube & vAppWasAlreadyDeployed = 1) % pUpgrade @= 'Y');\r\n\t\t\tIf (cApprovalDIM @= '');\r\n\t\t\t\t# If the Central app has an existing owner make sure any new cubes get a data reservation.\r\n\t\t\t\tcState = CellGetS(cCentralApplicationStateCube, pAppId, 'State');\r\n\t\t\t\tIf (cState @= '2');\r\n\t\t\t\t\tcCurrentOwner = CellGetS(cCentralApplicationStateCube, pAppId, 'CurrentOwnerId');\r\n\t\t\t\t\tIf (cCurrentOwner @<> '');\r\n\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t\t\t\t'pAppId', pAppId, 'pNode', '', 'pApprovalDim', '', 'pReserve', 'Y', 'pUser', cCurrentOwner, 'pControl', pControl);\r\n\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\tEndIf;\r\n\t\t\t\tEndIf;\r\n\t\t\tElse;\r\n\t\t\t\t#***Security overlay cube\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check for security overly cube for ' | vCubeName);\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\tvSecuirtyOverlayCube = '}SecurityOverlayGlobal_' | vCubeName;\t\t\t\t\r\n\t\t\t\tIF (CubeExists(vSecuirtyOverlayCube) = 0);\r\n\t\t\t\t\tvDimIndex =1;\r\n\t\t\t\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\t\t\t\tvTokenString = '';\r\n\t\t\t\t\tvFoundApproval = 'F';\r\n\t\t\t\t\tWhile (vDimension @<> '');\r\n\t\t\t\t\t\tIF (vDimension @= cApprovalDim);\r\n\t\t\t\t\t\t\tvSingleToken = '1';\r\n\t\t\t\t\t\t\tvFoundApproval = 'T';\r\n\t\t\t\t\t\tElse;\r\n\t\t\t\t\t\t\tvSingleToken = '0';\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tIF (vDimIndex > 1);\r\n\t\t\t\t\t\t\tvSingleToken = ':' | vSingleToken;\r\n\t\t\t\t\t\tEndif;\r\n\t\t\t\t\t\tvTokenString = vTokenString | vSingleToken;\r\n\t\t\t\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\t\t\t\tvDimension = TABDIM(vCubeName, vDimIndex);\r\n\t\t\t\t\tEnd;\r\n\t\t\t\t\tIF (vFoundApproval @= 'T');\r\n\t\t\t\t\t\tSecurityOverlayCreateGlobalDefault(vCubeName, vTokenString);\r\n\t\t\t\t\tEndif;\r\n\r\n\t\t\t\tEndif;\r\n\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Check for existing ownership for cube ' | vCubeName);\r\n\t\t\t\tEndIf;\r\n\t\t\t\t# If there are any existing node owners make sure any new cubes get a data reservation. \r\n\t\t\t\t#Also we need to update the newly created security overlay cube\r\n\t\t\t\tIf (CubeExists(cApplicationStateCube) = 1);\r\n\t\t\t\t\tcApprovalSubsetSize = SubsetGetSize(cApprovalDim,cApprovalSubset );\r\n\t\t\t\t\tvIndex = 1;\r\n\t\t\t\t\tWhile (vIndex <= cApprovalSubsetSize);\r\n\t\t\t\t\t\tvApprovalNode = SubsetGetElementName(cApprovalDIM, cApprovalSubset, vIndex);\r\n\t\t\t\t\t\tIf (DTYPE(cApprovalDIM, vApprovalNode) @<> 'C');\r\n\t\t\t\t\t\t\tcState = CellGetS(cApplicationStateCube, vApprovalNode, 'State');\r\n\t\t\t\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Node state for node ' | vApprovalNode | ' in cube ' | vCubeName | ' is ' | cState);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tIf (cState @= '2');\r\n\t\t\t\t\t\t\t\tcCurrentOwner = CellGetS(cApplicationStateCube, vApprovalNode, 'CurrentOwnerId');\r\n\t\t\t\t\t\t\t\tcOwnershipNode = CellGetS(cApplicationStateCube, vApprovalNode, 'TakeOwnershipNode');\r\n\t\t\t\t\t\t\t\tIf (cCurrentOwner @<> '' & cOwnershipNode @<> '');\r\n\t\t\t\t\t\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t\t\t\t\t\t\t'pAppId', pAppId, 'pNode', cOwnershipNode, 'pApprovalDim', cApprovalDIM, 'pReserve', 'Y', 'pUser', cCurrentOwner, 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\t\t\t\t\t\tProcessError;\r\n\t\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\t\tElseIf(cState @= '4');\r\n\t\t\t\t\t\t\t\tSecurityOverlayGlobalLockNode(1,vCubeName,vApprovalNode);\r\n\t\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tEndIf;\r\n\t\t\t\t\t\tvIndex = vIndex + 1;\r\n\t\t\t\t\tEnd;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\tvStringToScan = SUBST(vStringToScan, vPosCube +3, LONG(vStringToScan)-vPosCube);\r\n\tvPosCube = SCAN(cubeSeparater, vStringToScan);\r\nEnd;\r\n#***\r\n\r\nIf (DimensionExists(cTemporaryCubesDimension) = 1);\r\n\tDimensionDestroy(cTemporaryCubesDimension);\r\nEndIf;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pCubeInfo",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pUpgrade",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "Y",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_upgrade_security_post_from_v9_5_2_to_v10_1"
    }
}