{
    "Name": "}tp_update_application",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =  ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncControlDim = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncControlDimOld = ATTRS('}tp_applications', pAppId,  'VersionDimensionOld');\r\n\r\ncWritableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesWriteOld');\r\ncWritableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesWrite');\r\ncReadableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesReadOld');\r\ncReadableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesRead');\r\n\r\n#*** Check if a new version dimension is added.\r\nseIsNewVersionDimensionAdded = 'N';\r\nIF (cControlDimOld @='' & cControlDim @<> '');\r\nseIsNewVersionDimensionAdded = 'Y';\r\nEndif;\r\n\r\n#if a new version dimension is added, we need to recreate security overlay cubes with added dimension\r\nIF (seIsNewVersionDimensionAdded @= 'Y');\r\n\tvReturnValue = ExecuteProcess('}tp_update_application_cubes_pre', 'pExecutionId', pExecutionId, 'pAppId', pAppId);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndif;\r\n\r\ncApplicationCubesCube = '}tp_application_cubes';\r\ntotalCubes = DIMSIZ('}Cubes');\r\nindexCube = 1;\r\n\r\nWhile (indexCube <= totalCubes);\r\n\tcCubeName = DIMNM('}Cubes', indexCube);\r\n\tcIsAppCube = CellGetS(cApplicationCubesCube, pAppId, cCubeName);\r\n\tIf (cIsAppCube @= 'A');\r\n\r\n\t\tIF (seIsNewVersionDimensionAdded @= 'Y');\r\n\t\t\t#IF a new version demension is added, we need to remove all DRs from the data cube\r\n\t\t\tvDimIndex = 1;\r\n\t\t\tvAddress = '';\r\n\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tWhile (vDimension @<> '');\r\n\t\t\t\tIf (vDimIndex = 1);\r\n\t\t\t\t\tvAddress = '';\r\n\t\t\t\tElse;\r\n\t\t\t\t\tvAddress = vAddress |  '|';\r\n\t\t\t\tEndif;\r\n\t\t\t\tvDimIndex = vDimIndex +1;\r\n\t\t\t\tvDimension = TABDIM(cCubeName, vDimIndex);\r\n\t\t\tEnd;\r\n\t\t\tCubeDataReservationReleaseAll(cCubeName,'',vAddress);\r\n\r\n\t\tEndif;\r\n\r\n\t\tIF (seIsNewVersionDimensionAdded @= 'N' & cControlDim @<> '' & (cWritableSlicesOld @='' & cReadableSlicesOld @=''));\r\n\t\t\t#This is an initial rights saving, do nothing here\r\n\t\tElse;\r\n\t\t\tIF (cWritableSlicesOld @<> cWritableSlicesNew);\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_update_application_DR', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pCube', cCubeName);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\r\n\t\t\t\t#update security overlay cube with new writable slices\r\n\t\t\t\tvReturnValue = ExecuteProcess('}tp_update_application_securityOverlay', 'pExecutionId', pExecutionId, 'pAppId', pAppId, 'pCube', cCubeName);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\tEndif;\r\n\t\tEndif;\r\n\tEndIf;\r\n\r\n\tindexCube = indexCube +1;\r\nEnd;\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_update_application"
    }
}