{
    "Name": "TEAMONE.DEBUG",
    "HasSecurityAccess": true,
    "PrologProcedure": "nSaveDataAll=0;\r\nIf( CubeExists('}DimensionSecurity')=0 ); CubeCreate('}DimensionSecurity', '}Dimensions', '}Groups'); nSaveDataAll=1; EndIf;\r\nIf(CubeExists('}CubeSecurity')=0); CubeCreate('}CubeSecurity','}Cubes','}Groups'); nSaveDataAll=1; EndIf;\r\nIf(DimIx('}Groups','Manager')=0); ItemReject('Group not found: [Manager]'); EndIf;\r\nIf(CubeExists('}DimensionSecurity')=0); CubeCreate('}DimensionSecurity','}Dimensions','}Groups'); nSaveDataAll=1; EndIf;\r\nIf(DimIx('}Groups','Approver')=0); ItemReject('Group not found: [Approver]'); EndIf;\r\nIf(CubeExists('}ElementSecurity_organization')=0); CubeCreate('}ElementSecurity_organization','organization','}Groups'); nSaveDataAll=1; EndIf;\r\nIf(DimIx('}Groups','Canada')=0); ItemReject('Group not found: [Canada]'); EndIf;\r\nIf(DimIx('}Groups','USA')=0); ItemReject('Group not found: [USA]'); EndIf;\r\nIf(CubeExists('}ElementSecurity_Version')=0); CubeCreate('}ElementSecurity_Version','Version','}Groups'); nSaveDataAll=1; EndIf;\r\nIf(DimIx('}Groups','Manager')=0); ItemReject('Group not found: [Manager]'); EndIf;\r\nIf(nSaveDataAll>0); SaveDataAll(); EndIf;\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****",
    "MetadataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****",
    "DataProcedure": "\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****",
    "EpilogProcedure": "dim='}Groups'; hier = dim;\r\nsub='}groupSubset_0'; mdx='{['| dim |'].['| hier |'].[Manager]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\ndim='}Cubes'; hier='}Cubes'; cub='}CubeSecurity';\r\nsub='}elmSubset_0'; mdx='{['| dim |'].['| hier |'].[Calendar],['| dim |'].['| hier |'].[Allocation Calculation]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='READ'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n    iDim=CubeDimensionCountGet( elm ); While( iDim>0 ); dimName=TabDim(elm, iDim); If( CellGetS( '}DimensionSecurity', dimName, group ) @= '' ); CellPutS( 'READ', '}DimensionSecurity', dimName, group ); EndIf; iDim=iDim-1; End;\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nsub='}elmSubset_2'; mdx='{['| dim |'].['| hier |'].[Revenue]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='WRITE'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n    iDim=CubeDimensionCountGet( elm ); While( iDim>0 ); dimName=TabDim(elm, iDim); If( CellGetS( '}DimensionSecurity', dimName, group ) @= '' ); CellPutS( 'READ', '}DimensionSecurity', dimName, group ); EndIf; iDim=iDim-1; End;\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;dim='}Groups'; hier = dim;\r\nsub='}groupSubset_0'; mdx='{['| dim |'].['| hier |'].[Approver]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\ndim='}Dimensions'; hier='}Dimensions'; cub='}DimensionSecurity';\r\nsub='}elmSubset_0'; mdx='{['| dim |'].['| hier |'].[Product]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='WRITE'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nsub='}elmSubset_2'; mdx='{['| dim |'].['| hier |'].[Product:Product Color]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='WRITE'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nsub='}elmSubset_4'; mdx='{['| dim |'].['| hier |'].[Product:Product Size]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='READ'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;dim='}Groups'; hier = dim;\r\nsub='}groupSubset_0'; mdx='{['| dim |'].['| hier |'].[Canada]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsub='}groupSubset_1'; mdx='{['| dim |'].['| hier |'].[USA]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\ndim='organization'; hier='organization'; cub='}ElementSecurity_organization';\r\nsub='}elmSubset_0'; mdx='{['| dim |'].['| hier |'].[Canada],['| dim |'].['| hier |'].[Ontario],['| dim |'].['| hier |'].[Quebec],['| dim |'].['| hier |'].[British Columbia]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='WRITE'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nsAccess=''; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_1'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_1', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nsub='}elmSubset_2'; mdx='{['| dim |'].['| hier |'].[West Region],['| dim |'].['| hier |'].[California],['| dim |'].['| hier |'].[Washington]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess=''; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nsAccess='WRITE'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_1'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_1', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;dim='}Groups'; hier = dim;\r\nsub='}groupSubset_0'; mdx='{['| dim |'].['| hier |'].[Manager]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\ndim='Version'; hier='Version'; cub='}ElementSecurity_Version';\r\nsub='}elmSubset_0'; mdx='{HIERARCHIZE({['| dim |'].['| hier |'].members})}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='READ'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nsub='}elmSubset_2'; mdx='{['| dim |'].['| hier |'].[Actual]}'; If( HierarchySubsetExists(dim,hier,sub)=0 ); HierarchySubsetCreate(dim,hier,sub); HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); Else; HierarchySubsetMDXSet( dim, hier, sub, mdx ); HierarchySubsetMDXSet( dim, hier, sub, '' ); EndIf;\r\nsAccess='WRITE'; iElm=HierarchySubsetGetSize(dim, hier, sub); While(iElm>0);\r\n  elm = HierarchySubsetGetElementName(dim, hier, sub, iElm);\r\n  iGroup=HierarchySubsetGetSize('}Groups', '}Groups', '}groupSubset_0'); While(iGroup>0);\r\n    group = HierarchySubsetGetElementName('}Groups', '}Groups', '}groupSubset_0', iGroup);\r\n    CellPutS( sAccess, cub, elm, group );\r\n  iGroup=iGroup-1; End;\r\n iElm=iElm-1; End;\r\nSecurityRefresh;\r\n#****Begin: Generated Statements***\r\n#****End: Generated Statements****",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [],
    "Variables": [],
    "Attributes": {
        "Caption": "TEAMONE.DEBUG"
    }
}