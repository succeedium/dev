{
    "Name": "}tp_deploy_create_shadow_dimension",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010, 2013\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIf (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:',\r\n\tpExecutionId, pAppId, pApprovalDim, pApprovalSubset);\r\nEndIf;\r\n\r\n\r\n#*** Define constants\r\ncShadowApprovalDim = '}tp_tasks}' | pAppId;\r\ncAttributeCube = '}ElementAttributes_' | cShadowApprovalDim;\r\ncAttributeDim = cAttributeCube;\r\ncApprovalAttributeCube = '}ElementAttributes_' | pApprovalDim;\r\ncApprovalAttributeDim = cApprovalAttributeCube;\r\n\r\n\r\n#*** Create Shadow Dimension\r\nIf (pIncrShadowDimUpdate @= 'Y');\r\n\tvCopyApprovalHierarchyContents = 'N';\r\nElse;\r\n\tvCopyApprovalHierarchyContents = 'Y';\r\nEndIf;\r\n\r\nIf (DimensionExists(cShadowApprovalDim) = 0);\r\n\tDimensionCreate(cShadowApprovalDim);\r\n\tvCopyApprovalHierarchyContents = 'Y';\r\nEndIf;\r\n\r\nIF (SubsetExists(cShadowApprovalDim, pApprovalSubset) = 0);\r\n\tSubsetCreate(cShadowApprovalDim, pApprovalSubset);\r\nEndIf;\r\n\r\n# The subset we create on the Shadow Approval Dim will always comprise the whole\r\n# contents of cShadowApprovalDim, so we can just set it to use the whole dimension\r\nSubsetIsAllSet(cShadowApprovalDim, pApprovalSubset,1);\r\n\r\n#*** copy all aliases from approval dimension to the shadow dimension\r\nvTotalAttributes = DIMSIZ(cApprovalAttributeDim);\r\nvAttrLooper = vTotalAttributes;\r\n\r\nWhile (vAttrLooper >=1);\r\n\tvAttribute = DIMNM(cApprovalAttributeDim, vAttrLooper);\r\n\tinsertAlias = 'N';\r\n\tIf (CubeExists(cAttributeCube) =0);\r\n\t\tinsertAlias = 'Y';\r\n\tElseIf (DIMIX(cAttributeDim, vAttribute) = 0);\r\n\t\tinsertAlias = 'Y';\r\n\tElse;\r\n\t\tinsertAlias = 'N';\r\n\tEndIf;\r\n\t\r\n\tIF (insertAlias @= 'Y');\r\n\t\tvAttributeType = DType(cApprovalAttributeDim, vAttribute);\r\n\t\tIF (vAttributeType @= 'AA');\r\n\t\t\tAttrInsert(cShadowApprovalDim, '', vAttribute, 'A');\r\n\t\tEndIf;\r\n\tEndIf;\r\n\tvAttrLooper = vAttrLooper -1;\r\nEnd;\r\n\r\n\r\n#*** Use the same alias\r\nIf (pSubsetAlias @<>'' & DIMIX(cAttributeDim, pSubsetAlias) >0);\r\n\tSubsetAliasSet(cShadowApprovalDim, pApprovalSubset, pSubsetAlias);\r\nEndIf;\r\n\r\n#*** Delete all elements in Shadow Approval Dimension and copy all elements from approval hierarchy\r\nIf (vCopyApprovalHierarchyContents @= 'Y');\r\n\tDimensionDeleteAllElements(cShadowApprovalDim);\r\n\r\n\tvTotalNodes = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\n\tlooper = 1;\r\n\tWhile (looper <= vTotalNodes);\r\n\t\tvElem = SubsetGetElementName(pApprovalDim,  pApprovalSubset, looper);\r\n\t\tvType = DType(pApprovalDim, vElem);\r\n\t\tDimensionElementInsert(cShadowApprovalDim, '', vElem, vType);\r\n\t\tlooper = looper +1;\r\n\tEnd;\r\nEndIf;\r\n\r\n#  re-build the hierarchy in cShadowApprovalDim\r\nvTotalNodes = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\nlooper = 1;\r\n\r\nWhile (looper <=vTotalNodes);\r\n\tvElem = SubsetGetElementName(pApprovalDim,  pApprovalSubset, looper);\r\n\t# Need to handle dimensions with multiple roll-ups...so when we look to find the shadow dimension element's parent in the original\r\n\t# pApprovalDim, we need to ensure that the parent is also in cShadowApprovalDim....if it's not, then\r\n\t# keep looking until you find it. We know we only have to look a maximum of ELPARN times.\r\n\tvElemParentCount = ELPARN(pApprovalDim, vElem);\r\n\trolluplooper = 1;\r\n\tWhile (rolluplooper <= vElemParentCount);\r\n\t\tvOriginalParent = ELPAR(pApprovalDim, vElem, rolluplooper);\r\n\t\t# Check that parent of selected node exists in the shadow a/h...if it doesn't, then keep looking\r\n\t\tIf (DIMIX(cShadowApprovalDim, vOriginalParent)<>0);\r\n\t\t\tvWeight = ELWEIGHT(pApprovalDim, vOriginalParent, vElem);\r\n\t\t\tDimensionElementComponentAdd(cShadowApprovalDim, vOriginalParent, vElem, vWeight);\r\n\t\tEndIf;\r\n\t\trolluplooper = rolluplooper + 1;\r\n\tEnd;\r\n\t\r\n\tlooper = looper +1;\r\nEnd;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010, 2013\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Add alias for each node on shadow dimension\r\nvTotalNodes = SubsetGetSize(pApprovalDim, pApprovalSubset);\r\nlooper = 1;\r\nWhile (looper <=vTotalNodes);\r\n\tvElem = SubsetGetElementName(pApprovalDim,  pApprovalSubset, looper);\r\n\r\n\tvTotalAttributes = DIMSIZ(cApprovalAttributeDim);\r\n\tvAttrLooper = vTotalAttributes;\r\n\r\n\tWhile (vAttrLooper >=1);\r\n\t\tvAttribute = DIMNM(cApprovalAttributeDim, vAttrLooper);\r\n\t\tvAttributeType = DType(cApprovalAttributeDim, vAttribute);\r\n\t\tIF (vAttributeType @= 'AA');\r\n\t\t\tvApprovalElemAlias = AttrS(pApprovalDim, vElem, vAttribute);\r\n\t\t\tvShadowElemAlias = AttrS(cShadowApprovalDim, vElem, vAttribute);\r\n\t\t\tIF (vApprovalElemAlias @<> vShadowElemAlias);\r\n\t\t\t\tAttrPutS(vApprovalElemAlias, cShadowApprovalDim, vElem, vAttribute);\r\n\t\t\tEndIf;\r\n\t\tEndIf;\r\n\t\tvAttrLooper = vAttrLooper -1;\r\n\tEnd;\r\n\tlooper = looper +1;\r\nEnd;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pApprovalDim",
            "Prompt": "",
            "Value": "TestElist",
            "Type": "String"
        },
        {
            "Name": "pApprovalSubset",
            "Prompt": "",
            "Value": "TestElist",
            "Type": "String"
        },
        {
            "Name": "pSubsetAlias",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pIncrShadowDimUpdate",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_deploy_create_shadow_dimension"
    }
}