{
    "Name": "SPACE.ExecuteHttpRequest",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\nsProcessName = GetProcessName();\r\n\r\n# Store files in model_upload folder so we can easily download/check the content\r\n#folderScript = './model_upload/';\r\nIf( sFolder @= '' );\r\n  sBaseFileName = sRequestId;\r\nElse;\r\n  ExecuteCommand( 'cmd /c if not exist \"'| sFolder |'\" mkdir \"'| sFolder |'\"', 1 );\r\n  sBaseFileName = sFolder |'/'| sRequestId;\r\nEndIf;\r\n\r\n# Powershell script file name\r\nfileScript = sBaseFileName |'.ps1';\r\nDatasourceASCIIDelimiter='';\r\nDatasourceASCIIQuoteCharacter = '';\r\n\r\n# Create Powershell script\r\nTextOutput( fileScript, '# Autogenerated by '| sProcessName );\r\nTextOutput( fileScript, Expand(  '$RequestId = \"%sRequestId%\"') );\r\nTextOutput( fileScript, Expand(  '$BaseFileName = \"%sBaseFileName%\"') );\r\nTextOutput( fileScript,'# Delete old file');\r\nTextOutput( fileScript,'Get-ChildItem \"${BaseFileName}.*\" | foreach { Remove-Item -Path $_.FullName }');\r\nTextOutput( fileScript,'# Log file');\r\nTextOutput( fileScript, 'Start-Transcript -Path \"${BaseFileName}.log\"' );\r\nTextOutput( fileScript,'# Response file');\r\nTextOutput( fileScript, '$ResponseFile = \"${BaseFileName}.response.txt\"' );\r\nTextOutput( fileScript,'# Response body file');\r\nTextOutput( fileScript, '$BodyFile = \"${BaseFileName}.body.txt\"' );\r\nTextOutput( fileScript,'# Request method: GET, POST, PATCH, PUT or DELETE');\r\nTextOutput( fileScript, Expand ('$Method = \"%sMethod%\"') );\r\nTextOutput( fileScript,'# Request URL, must include the HTTP or HTTPS protocol');\r\nTextOutput( fileScript, '$Url = '''|sUrl|''' ' );\r\nTextOutput( fileScript, '# Request headers' );\r\nTextOutput( fileScript, '$RequestHeaders = @{}' );\r\n\r\nIf( sAuthorization @<> '' );\r\n  TextOutput( fileScript,'# Authorization header');\r\n  TextOutput( fileScript, Expand ('$RequestHeaders.add(''Authorization'',''%sAuthorization%'')') );\r\nEndIf;\r\nIf( sContentType @<> '' );\r\n  TextOutput( fileScript,'# Content-Type header');\r\n  TextOutput( fileScript, Expand ('$RequestHeaders.add(''Content-Type'',''%sContentType%'')') );\r\nEndIf;\r\nIf( sAccept @<> '' );\r\n  TextOutput( fileScript,'# sAccept header');\r\n  TextOutput( fileScript, Expand ('$RequestHeaders.add(''Accept'',''%sAccept%'')') );\r\nEndIf;\r\n\r\ni = 1; While( i <= 5 );\r\nsHeader = Expand('%sHeader'| NumberToString(i) |'%');\r\n  If( sHeader @<> '' );\r\n    posDelimiter = Scan( '::', sHeader );\r\n    sHeaderName = Subst( sHeader, 1, posDelimiter - 1 );\r\n    sHeaderValue = Delet( sHeader, 1, posDelimiter + 1 );\r\n    TextOutput( fileScript,'# Header #'| NumberToString(i) );\r\n    TextOutput( fileScript, Expand ('$HeaderName = \"%sHeaderName%\"') );\r\n    TextOutput( fileScript, Expand ('$HeaderValue = \"%sHeaderValue%\"') );\r\n    TextOutput( fileScript, '$RequestHeaders.add($HeaderName,$HeaderValue)\u00a0 \u00a0' );  \r\n  EndIf;\r\ni = i + 1; End;\r\nTextOutput( fileScript, '$InvokeWebRequestParameters = @{\"Uri\"=$Url;\"Method\"=$Method;\"Headers\"=$RequestHeaders;\"UseBasicParsing\"=$true}' );\r\nIf( sBodyJSON @<> '' );\r\n  If( sMethod @= 'GET' ); LogOutput( 'ERROR', 'Cannot sBodyJSON with GET method' ); ProcessError; EndIf;\r\n  TextOutput( fileScript,'function ConvertTo-Hashtable {');\r\n  TextOutput( fileScript,'    [CmdletBinding()]');\r\n  TextOutput( fileScript,'    [OutputType(''hashtable'')]');\r\n  TextOutput( fileScript,'    param (');\r\n  TextOutput( fileScript,'        [Parameter(ValueFromPipeline)]');\r\n  TextOutput( fileScript,'        $InputObject');\r\n  TextOutput( fileScript,'    )');\r\n  TextOutput( fileScript,'    process {');\r\n  TextOutput( fileScript,'        ## Return null if the input is null. This can happen when calling the function recursively and a property is null');\r\n  TextOutput( fileScript,'        if ($null -eq $InputObject) {');\r\n  TextOutput( fileScript,'            return $null');\r\n  TextOutput( fileScript,'        }');\r\n  TextOutput( fileScript,'        ## Check if the input is an array or collection. If so, we also need to convert');\r\n  TextOutput( fileScript,'        ## those types into hash tables as well. This function will convert all child');\r\n  TextOutput( fileScript,'        ## objects into hash tables (if applicable)');\r\n  TextOutput( fileScript,'        if ($InputObject -is [System.Collections.IEnumerable] -and $InputObject -isnot [string]) {');\r\n  TextOutput( fileScript,'            $collection = @(');\r\n  TextOutput( fileScript,'                foreach ($object in $InputObject) {');\r\n  TextOutput( fileScript,'                    ConvertTo-Hashtable -InputObject $object');\r\n  TextOutput( fileScript,'                }');\r\n  TextOutput( fileScript,'            )');\r\n  TextOutput( fileScript,'            ## Return the array but do not enumerate it because the object may be pretty complex');\r\n  TextOutput( fileScript,'            #Write-Output -NoEnumerate $collection');\r\n  TextOutput( fileScript,'            ## Return the array');\r\n  TextOutput( fileScript,'            Write-Output $collection');\r\n  TextOutput( fileScript,'        } elseif ($InputObject -is [psobject]) { ## If the object has properties that need enumeration');\r\n  TextOutput( fileScript,'            ## Convert it to its own hash table and return it');\r\n  TextOutput( fileScript,'            $hash = @{}');\r\n  TextOutput( fileScript,'            foreach ($property in $InputObject.PSObject.Properties) {');\r\n  TextOutput( fileScript,'                $hash[$property.Name] = ConvertTo-Hashtable -InputObject $property.Value');\r\n  TextOutput( fileScript,'            }');\r\n  TextOutput( fileScript,'            $hash');\r\n  TextOutput( fileScript,'        } else {');\r\n  TextOutput( fileScript,'            ## If the object is not an array, collection, or other object, it is already a hash table');\r\n  TextOutput( fileScript,'            ## So just return it.');\r\n  TextOutput( fileScript,'            $InputObject');\r\n  TextOutput( fileScript,'        }');\r\n  TextOutput( fileScript,'    }');\r\n  TextOutput( fileScript,'}');\r\n  TextOutput( fileScript, Expand ('$BodyJSON = ''%sBodyJSON%''') );\r\n  TextOutput( fileScript, Expand ('$Body = $BodyJSON | ConvertFrom-Json | ConvertTo-HashTable | ConvertTo-Json') );\r\n  TextOutput( fileScript, '$InvokeWebRequestParameters.add(\"Body\",$Body)' );\r\nEndIf;\r\n\r\nTextOutput( fileScript, '# Run/execute request' );\r\nTextOutput( fileScript, 'try {' );\r\nTextOutput( fileScript, '\u00a0 \u00a0 $Response = Invoke-WebRequest @InvokeWebRequestParameters' );\r\nTextOutput( fileScript, '\u00a0 \u00a0 Out-File -FilePath $ResponseFile -InputObject $Response.RawContent' );\r\nTextOutput( fileScript, '    Out-File -FilePath $BodyFile -InputObject $Response.Content' );\r\nTextOutput( fileScript, '}\u00a0' );\r\nTextOutput( fileScript, 'catch {' );\r\nTextOutput( fileScript, '\u00a0 \u00a0 $Response = $_.Exception.Response' );\r\nTextOutput( fileScript, '\u00a0 \u00a0 Out-File -FilePath $ResponseFile -InputObject $Response\u00a0 \u00a0' );\r\nTextOutput( fileScript, '}\u00a0' );\r\nTextOutput( fileScript, '# Write response data' );\r\nTextOutput( fileScript, '$StatusCode = $Response.StatusCode' );\r\nTextOutput( fileScript, '$StatusFile = \"${BaseFileName}.status.${StatusCode}.txt\"' );\r\nTextOutput( fileScript, 'Out-File -FilePath $StatusFile -InputObject $StatusCode' );\r\nTextOutput( fileScript, 'Stop-Transcript' );\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n# Run Powershell script\r\nExecuteCommand( 'powershell.exe -File ' | fileScript, 1);",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "sFolder",
            "Prompt": "",
            "Value": "model_upload",
            "Type": "String"
        },
        {
            "Name": "sRequestId",
            "Prompt": "",
            "Value": "",
            "Type": "String"
        },
        {
            "Name": "sUrl",
            "Prompt": "",
            "Value": "https://nvirginia.succeedium.com/python/",
            "Type": "String"
        },
        {
            "Name": "sMethod",
            "Prompt": "",
            "Value": "POST",
            "Type": "String"
        },
        {
            "Name": "sBodyJSON",
            "Prompt": "",
            "Value": "{\"file\": \"email.py\", \"action\":\"RUN\",arguments:[\"space@succeedium.com\",\"TI process email\",\"Hello!\"]}",
            "Type": "String"
        },
        {
            "Name": "sAuthorization",
            "Prompt": "",
            "Value": "CAMNamespace YnAwMzE3X3RtMV9hdXRvbWF0aW9uOjkzVTQ3NndqV29TNTpMREFQ",
            "Type": "String"
        },
        {
            "Name": "sContentType",
            "Prompt": "",
            "Value": "application/json; charset=utf-8;",
            "Type": "String"
        },
        {
            "Name": "sAccept",
            "Prompt": "",
            "Value": "*/*;",
            "Type": "String"
        },
        {
            "Name": "sHeader1",
            "Prompt": "",
            "Value": "",
            "Type": "String"
        },
        {
            "Name": "sHeader2",
            "Prompt": "",
            "Value": "",
            "Type": "String"
        },
        {
            "Name": "sHeader3",
            "Prompt": "",
            "Value": "",
            "Type": "String"
        },
        {
            "Name": "sHeader4",
            "Prompt": "",
            "Value": "",
            "Type": "String"
        },
        {
            "Name": "sHeader5",
            "Prompt": "",
            "Value": "",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "SPACE.ExecuteHttpRequest"
    }
}