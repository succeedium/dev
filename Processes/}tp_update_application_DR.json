{
    "Name": "}tp_update_application_DR",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncConfigDim = '}tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\n\tvReturnValue = ExecuteProcess('}tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n\t'pProcess', cTM1Process, 'pControl', 'Y');\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n#***\r\n\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncShadowApprovalDim = ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\ncControlDim = ATTRS('}tp_applications', pAppId,  'VersionDimension');\r\ncWritableSlicesOld = ATTRS('}tp_applications', pAppId,  'VersionSlicesWriteOld');\r\ncWritableSlicesNew = ATTRS('}tp_applications', pAppId,  'VersionSlicesWrite');\r\ncStateCube = '}tp_application_state}' | pAppId;\r\ncNodeInfoDim = '}tp_node_info';\r\ncStateField = 'State';\r\ncOwnerIdField = 'CurrentOwnerId';\r\ncOwnershipNodeField = 'TakeOwnershipNode';\r\nvSingleQ = '''';\r\n\r\nIF (cWritableSlicesOld @<> cWritableSlicesNew);\r\n\tvMdx = '{FILTER([' | cShadowApprovalDim | '].MEMBERS, [' | cStateCube | '].[' | cNodeInfoDim | '].[' | cStateField | '] =' | vSingleQ | '2' | vSingleQ | ')}';\r\n\tvSubsetOwnedNodes = 'tp_temp_owned_nodes';\r\n\tIF (SubsetExists(cShadowApprovalDim, vSubsetOwnedNodes) =1);\r\n\t\tSubsetDestroy(cShadowApprovalDim,vSubsetOwnedNodes);\r\n\tEndif;\r\n\r\n\tSubsetCreateByMdx(vSubsetOwnedNodes, vMdx, cShadowApprovalDim);\r\n\r\n\tvTotalOwnedNodes = SubsetGetSize(cShadowApprovalDim,vSubsetOwnedNodes );\r\n\r\n\tvLooper =1 ;\r\n\r\n\tWhile (vLooper <= vTotalOwnedNodes);\r\n\t\tvOwnedNode = SubsetGetElementName(cShadowApprovalDim, vSubsetOwnedNodes, vLooper);\r\n\t\tIF (DTYPE(cShadowApprovalDim, vOwnedNode) @<> 'C');\r\n\r\n\t\t\tvOwner = CellGetS(cStateCube, vOwnedNode, cOwnerIdField);\r\n\t\t\tvOwnershipNode = CellGetS(cStateCube, vOwnedNode, cOwnershipNodeField);\r\n\t\t\t#First release all old DRs on old control slices\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pCube', pCube, 'pApprovalDim', cApprovalDim, 'pNode', vOwnershipNode,  'pReserve', 'N', \r\n\t\t\t\t'pUser', vOwner, 'pControlDim', cControlDim, 'pControlWritableSlices', cWritableSlicesOld );\r\n\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'DR released on node: ' | vOwnedNode | ', user: ' | vOwner | ', cube: ' | pCube);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t#Next reacquire new DRs on new control slices\r\n\t\t\tvReturnValue = ExecuteProcess('}tp_workflow_util_reserve_cube_slices', 'pExecutionId', pExecutionId, \r\n\t\t\t\t'pAppId', pAppId, 'pCube', pCube, 'pApprovalDim', cApprovalDim, 'pNode', vOwnershipNode,  'pReserve', 'Y', \r\n\t\t\t\t'pUser', vOwner, 'pControlDim', cControlDim, 'pControlWritableSlices', cWritableSlicesNew );\r\n\r\n\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\tProcessError;\r\n\t\t\tEndIf;\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'DR reacquired on node: ' | vOwnedNode | ', user: ' | vOwner | ', cube:' | pCube);\r\n\t\t\tEndIf;\r\n\r\n\t\tEndif;\r\n\t\tvLooper = vLooper +1;\r\n\tEnd;\r\n\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#***\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetOwnedNodes) =1);\r\nSubsetDestroy(cShadowApprovalDim,vSubsetOwnedNodes);\r\nEndif;\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pCube",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_update_application_DR"
    }
}