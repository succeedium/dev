{
    "Name": "}tp_workflow_release_node",
    "HasSecurityAccess": true,
    "PrologProcedure": "#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndIf;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#***\r\ncApprovalDim =  ATTRS('}tp_applications', pAppId,  'ApprovalDimension');\r\ncApprovalSubset =ATTRS('}tp_applications', pAppId,  'ApprovalSubset');\r\ncIsActive =ATTRS('}tp_applications', pAppId, 'IsActive');\r\ncShadowApprovalDim =ATTRS('}tp_applications', pAppId, 'ApprovalShadowDimension');\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'get application attributes', cApprovalDim, cApprovalSubset, cIsActive,cShadowApprovalDim );\r\nEndIf;\r\n\r\n\r\nIf (cIsActive @<> 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_APP_NOT_ACTIVE',\r\n\t\t'pErrorDetails', pAppId,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pTime, pAppId, pNode, pControl);\r\nEndIf;\r\n\r\n#***\r\n\r\nvIsAdmin = CellGetS('}ClientGroups', TM1User, 'ADMIN');\r\n\r\n#*** If an owner was specified then the caller must be an admin, \r\nIf (pUser @<> '' & vIsAdmin @= '');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_NO_PERMISSION',\r\n\t\t'pErrorDetails', TM1User,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\ncDisplayUserName = ATTRS('}Clients', TM1User, '}TM1_DefaultDisplayValue');\r\nIf (cDisplayUserName @= '');\r\n\tcDisplayUserName = TM1User;\r\nEndIf;\r\n\r\n#*** \r\n\r\nIf (cShadowApprovalDim @= '');\r\n\tcStateCube = cControlPrefix | 'tp_central_application_state';\r\n\tcStateMember = pAppId;\r\nElse;\r\n\r\n\t#* Check node\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node: ' | pNode);\r\n\tEndIf;\r\n\tIf (DIMIX(cShadowApprovalDim, pNode) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tcStateCube = cControlPrefix | 'tp_application_state}' | pAppId;\r\n\tcStateMember = pNode;\r\nEndIf;\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'Check state cube: ' | cStateCube);\r\nEndIf;\r\n\r\nIf (CubeExists(cStateCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_CUBE_NOT_EXIST',\r\n\t\t'pErrorDetails', cStateCube,\r\n\t\t'pControl', pControl);\r\n\t\r\n\tProcessError;\r\nEndIf;\r\n\r\n#*** \r\n\r\n#constant\r\ncLocked = '4';\r\ncNotStarted = '0';\r\ncWorkInProgress = '2';\r\ncState = 'State';\r\n\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncBeingEdited = 'BeingEdited';\r\ncOffline = 'Offline';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\n\r\n#****\r\nIf (cShadowApprovalDim @<> '');\r\n\tpNode = DimensionElementPrincipalName(cShadowApprovalDim, pNode);\r\nEndIf;\r\n\r\n# If at the leaf level\r\nIf (cShadowApprovalDim @= '' % DTYPE(cShadowApprovalDim, pNode) @='N');\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Check node state');\r\n\tEndIf;\r\n\tvStateValue = CellGetS(cStateCube, cStateMember, cState);\r\n\r\n\tIf (vStateValue @<> cWorkInProgress);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_STATE',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode | ', ' | vStateValue,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Get current ownerID and ownershipNode');\r\n\tEndIf;\r\n\t\r\n\tvCurrentOwner = CellGetS(cStateCube, cStateMember, cCurrentOwner);\r\n\tvCurrentOwnerId = CellGetS(cStateCube, cStateMember, cCurrentOwnerId);\r\n\tvOwnershipNode = CellGetS(cStateCube, cStateMember, cTakeOwnershipNode);\r\n\t\r\n\t#*** When no user is specified, admins are releasing current owner\r\n\tIf (pUser @= '');\r\n\t\tIf (vIsAdmin @<> '');\r\n\t\t\tpUser = vCurrentOwnerId;\r\n\t\tElse;\r\n\t\t\tpUser = TM1User;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\t\r\n\tIf (pUser @<> vCurrentOwnerId);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_OWNER',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode | ', ' | vCurrentOwner,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\r\n\tIf (cShadowApprovalDim @<> '' & pNode @<> vOwnershipNode);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_WRONG_OWNERSHIP_LEVEL',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode | ', ' | vCurrentOwner,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\t\t\r\n\t#***\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Release owner data slice');\r\n\tEndIf;\r\n\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', pUser, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#*** \r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Clear ownership fields');\r\n\tEndIf;\r\n\r\n\tCellPutS('', cStateCube, cStateMember, cCurrentOwner);\r\n\tCellPutS('', cStateCube, cStateMember, cCurrentOwnerId);\r\n\tCellPutS('', cStateCube, cStateMember, cTakeOwnershipNode);\r\n\tCellPutS('', cStateCube, cStateMember, cBeingEdited);\r\n\tCellPutS('', cStateCube, cStateMember, cOffline);\r\n\t\r\n\tIf (cShadowApprovalDim @= '');\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Set state');\r\n\t\tEndIf;\r\n\t\tCellPutS(cNotStarted, cStateCube, cStateMember, cState);\r\n\t\tCellPutS(cDisplayUserName, cStateCube, cStateMember, cStateChangeUser);\r\n\t\tCellPutS(pTime, cStateCube, cStateMember, cStateChangeDate);\r\n\tElse;\r\n\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\tTextOutput(cTM1Log, 'Change state');\r\n\t\tEndIf;\r\n\t\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId, \r\n\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', pNode, 'pPrivilege', 'RELEASE', 'pUpdateAncestorState', 'Y','pControl', pControl);\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n# Else at a consolidation\r\nElse;\r\n\r\n\t# If no user was specified, then the current user's ownership is being released\r\n\tIf (pUser @= '');\r\n\t\tpUser = TM1User;\r\n\tEndIf;\r\n\t\r\n\t#*** Escape the node to ensure valid MDX\r\n\tStringGlobalVariable('gEscapedId');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_util_escape_id', \r\n\t\t'pExecutionId', pExecutionId, 'pNode', pNode, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Escaped Node name: ' | gEscapedId);\r\n\tEndIf;\r\n\r\n\t# Take care of the leaf nodes in the package\r\n\tvMDX = '{INTERSECT(TM1FILTERBYLEVEL({DESCENDANTS([' | cShadowApprovalDim | '].[' | gEscapedId | ']) }, 0), TM1SUBSETTOSET([' | cShadowApprovalDim | '],\"' | cApprovalSubset | '\")), ['\r\n\t\t| cShadowApprovalDim | '].[' | gEscapedId | ']}';\r\n\tvSubsetLeafChildren = 'takeOwnership_onConsolidation_' | pExecutionId;\r\n\tIf (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\t\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tEndIf;\r\n\tSubsetCreateByMdx(vSubsetLeafChildren, vMDX);\r\n\tSubsetElementInsert(cShadowApprovalDim, vSubsetLeafChildren, pNode, 0);\r\n\tvSize = SubsetGetSize(cShadowApprovalDim, vSubsetLeafChildren);\r\n\tvUpdateAncestorState = 'Y';\r\n\tIF (vSize > 100);\r\n\t\tvUpdateAncestorState = 'N';\r\n\tEndIf;\r\n\tlooper = vSize;\r\n\tvLeafOwnedAtRightLevel = 0;\r\n\tWhile (looper >=1);\r\n\t\tvLeafChild = SubsetGetElementName(cShadowApprovalDim, vSubsetLeafChildren, looper);\r\n\r\n\t\t#leaf node, not the dummy node\r\n\t\tIF (vLeafChild @<> pNode);\r\n\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Check status for leaf node: ' | vLeafChild);\r\n\t\t\tEndIf;\r\n\t\t\tvStateValue = CellGetS(cStateCube, vLeafChild, cState);\r\n\t\t\tvCurrentOwnerId = CellGetS(cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\tvOwnershipNode = CellGetS(cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\tTextOutput(cTM1Log, 'Status for leaf node: ' | vLeafChild | ' State=' | vStateValue | ' OwnerId=' | vCurrentOwnerId | ' OwnershipNode=' | vOwnershipNode);\r\n\t\t\tEndIf;\r\n\r\n\t\t\t# If the current user is the owner of this node take at the consolidation we can release it\r\n\t\t\tIf ((vStateValue @= cWorkInProgress) & (pUser @= vCurrentOwnerId) & (pNode @= vOwnershipNode));\r\n\r\n\r\n\t\t\t\t#*** \r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Clear leaf node ownership fields');\r\n\t\t\t\tEndIf;\r\n\t\t\t\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cCurrentOwner);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cCurrentOwnerId);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cTakeOwnershipNode);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cBeingEdited);\r\n\t\t\t\tCellPutS('', cStateCube, vLeafChild, cOffline);\r\n\t\t\t\t\t\t\r\n\t\t\t\tIf (cGenerateLog @= 'Y');\r\n\t\t\t\t\tTextOutput(cTM1Log, 'Change leaf node state');\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_workflow_change_node_state', 'pExecutionId', pExecutionId, \r\n\t\t\t\t\t'pTime', pTime, 'pAppId', pAppId, 'pNode', vLeafChild, 'pPrivilege', 'RELEASE', 'pUpdateAncestorState', vUpdateAncestorState, 'pControl', pControl);\r\n\t\t\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\t\t\tProcessError;\r\n\t\t\t\tEndIf;\r\n\t\t\t\tvLeafOwnedAtRightLevel = vLeafOwnedAtRightLevel +1;\r\n\t\t\t\t\t\t\t\r\n\t\t\tEndIF;\r\n\t\tEndIf;\r\n\t\r\n\t\tlooper = looper -1;\r\n\tEnd;\r\n\r\n\tIf (vLeafOwnedAtRightLevel =0);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t\t'pGuid', pExecutionId, \r\n\t\t\t'pProcess', cTM1Process, \r\n\t\t\t'pErrorCode', 'TI_NO_LEAF_OWNED_AT_RIGHT_LEVEL',\r\n\t\t\t'pErrorDetails', 'Release' | ', ' | pNode,\r\n\t\t\t'pControl', pControl);\r\n\t\t\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\t#If we didn't update ancestors' state for an individual leaf node, we must update all consolidated nodes now\r\n\tIf (vUpdateAncestorState @= 'N');\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_update_state_cube', 'pGuid', pExecutionId,'pAppId', pAppId,'pUpdateLeafState', 'N', 'pControl', pControl);\r\n\t\t\t\t\t\t\t\t\r\n\t\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\t\tProcessError;\r\n\t\tEndIf;\r\n\tEndIf;\r\n\r\n\t#remove DR on consolidated node\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_reserve_slice', 'pExecutionId', pExecutionId, \r\n\t\t'pAppId', pAppId, 'pNode', pNode, 'pApprovalDim', cApprovalDim, 'pReserve', 'N', 'pUser', vCurrentOwnerId, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Finished checking for leaf nodes');\r\n\tEndIf;\r\n\t\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\nIF (SubsetExists(cShadowApprovalDim, vSubsetLeafChildren) <>0);\r\n\tSubsetDestroy(cShadowApprovalDim, vSubsetLeafChildren);\r\nENDIF;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pTime",
            "Prompt": "",
            "Value": "0",
            "Type": "String"
        },
        {
            "Name": "pAppId",
            "Prompt": "",
            "Value": "MyApp",
            "Type": "String"
        },
        {
            "Name": "pNode",
            "Prompt": "",
            "Value": "NA",
            "Type": "String"
        },
        {
            "Name": "pUser",
            "Prompt": "",
            "Value": "NA",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_workflow_release_node"
    }
}