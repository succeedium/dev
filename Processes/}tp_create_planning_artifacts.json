{
    "Name": "}tp_create_planning_artifacts",
    "HasSecurityAccess": false,
    "PrologProcedure": "\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\ncControlPrefix = '';\r\nIf (pControl @= 'Y');\r\n\tcControlPrefix = '}';\r\nEndIf;\r\n\r\n#*** Create \"everyone\" group\r\n\r\ncSystemConfigDim = cControlPrefix | 'tp_system_config';\r\nIf (DimensionExists(cSystemConfigDim) = 0);\r\n\tProcessError;\r\nEndIf;\r\n\r\ncSecurityModeNode = 'IntegratedSecurityMode';\r\ncConfigValueAttr = 'ConfigValue';\r\nvSecurityMode = ATTRS(cSystemConfigDim, cSecurityModeNode, cConfigValueAttr);\r\n\r\ncCognosEveryoneGroup = 'CAMID(\"::Everyone\")';\r\ncTpEveryoneGroup = cControlPrefix | 'tp_Everyone';\r\nIf (vSecurityMode @= '5');\r\n\r\n\tIf (DIMIX('}Groups', cCognosEveryoneGroup) = 0);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\r\n\tIf (DIMIX('}Groups', cTpEveryoneGroup) <> 0);\r\n\t\tDeleteGroup(cTpEveryoneGroup);\r\n\tEndIf;\r\n\r\n\tcEveryoneGroup = cCognosEveryoneGroup;\r\n\r\nElse;\r\n\r\n\tcEveryoneGroup = cTpEveryoneGroup;\r\n\r\n\tIf (DIMIX('}Groups', cEveryoneGroup) = 0);\r\n\t\tAddGroup(cEveryoneGroup);\r\n\tEndIf;\r\n\r\nEndIf;\r\n\r\n\r\n#***create error log objects\r\ncErrorCube = cControlPrefix | 'tp_process_errors';\r\nIf (CubeExists(cErrorCube) = 0);\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_setup', 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n#***Insert a field in \"}tp_config\" dimension to enable element security on approval dimension \r\n#default value is  \"Y\"\r\ncEnableElementSecurity = 'EnableElementSecurityOnApproval';\r\ncConfigDim =cControlPrefix | 'tp_config';\r\nvIsInitialSetup = 'N';\r\nif (DimensionExists(cConfigDim)=0);\r\nDimensionCreate(cConfigDim);\r\nendif;\r\nIF (DIMIX(cConfigDim, cEnableElementSecurity)=0);\r\nDimensionElementInsert(cConfigDim, '', cEnableElementSecurity,'S');\r\nvIsInitialSetup = 'Y';\r\nEndif;\r\n\r\ncServerMaintenanceRunning = 'ApplicationMaintenanceRunning';\r\nIF (DIMIX(cConfigDim, cServerMaintenanceRunning)=0);\r\nDimensionElementInsert(cConfigDim, '', cServerMaintenanceRunning,'S');\r\nEndif;\r\n\r\n#*** Log File Name\r\ncConfigDim = cControlPrefix | 'tp_config';\r\nIf (DimensionExists(cConfigDim) = 1);\r\n\tcGenerateLog = ATTRS(cConfigDim, 'Generate TI Log', 'String Value');\r\nElse;\r\n\tcGenerateLog = 'N';\r\nEndIf;\r\n\r\ncTM1Process = GetProcessName();\r\nStringGlobalVariable('gPrologLog');\r\nStringGlobalVariable('gEpilogLog');\r\nStringGlobalVariable('gDataLog');\r\n\r\nIF (cGenerateLog @= 'Y' % cGenerateLog @= 'T');\r\nvReturnValue = ExecuteProcess(cControlPrefix | 'tp_get_log_file_names', 'pExecutionId', pExecutionId,\r\n'pProcess', cTM1Process, 'pControl', pControl);\r\nIf (vReturnValue <> ProcessExitNormal());\r\n\tProcessError;\r\nEndIf;\r\nEndif;\r\n\r\ncPrologLog = gPrologLog;\r\ncEpilogLog = gEpilogLog;\r\ncDataLog = gDataLog;\r\ncTM1Log = cPrologLog;\r\n\r\n#*** Log Parameters\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Parameters:', pExecutionId, pControl);\r\nEndIf;\r\n\r\ncTpPrefix = cControlPrefix | 'tp_';\r\ncTpPrefixLength = LONG(cTpPrefix);\r\n\r\n#***\r\n\r\ncApplicationsDim = cControlPrefix | 'tp_applications';\r\n\r\ncApprovalDimensionAttr = 'ApprovalDimension';\r\ncApprovalSubsetAttr = 'ApprovalSubset';\r\ncApprovalShadowDimAttr = 'ApprovalShadowDimension';\r\ncIsActiveAttr = 'IsActive';\r\ncStoreIdAttr = 'StoreId';\r\ncSecuritySetAttr = 'SecuritySet';\r\ncVersionAttr = 'Version';\r\ncCubeViewsAttr = 'CubeViews';\r\ncMaintenanceAttr = 'IsRunningMaintenance';\r\ncVersionSlicesWrite = 'VersionSlicesWrite';\r\ncVersionSlicesWriteOld =  'VersionSlicesWriteOld';\r\ncVersionSlicesRead = 'VersionSlicesRead';\r\ncVersionSlicesReadOld =  'VersionSlicesReadOld';\r\ncVersionDimension = 'VersionDimension';\r\ncVersionDimensionOld = 'VersionDimensionOld';\r\ncApplicationType = 'ApplicationType';\r\ncApplicationLastSavedTime = 'ApplicationLastSaved';\r\ncSecurityMethod = 'SecurityMethod';\r\ncBounceMode='BounceMode';\r\n\r\nIf (DimensionExists(cApplicationsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create applications dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cApplicationsDim);\r\n\tAttrInsert(cApplicationsDim, '', cApprovalDimensionAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApprovalSubsetAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApprovalShadowDimAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cIsActiveAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cStoreIdAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cSecuritySetAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cCubeViewsAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cMaintenanceAttr, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionDimension, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionDimensionOld, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesWrite, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesWriteOld, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesRead, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cVersionSlicesReadOld, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApplicationType, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cApplicationLastSavedTime, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cSecurityMethod, 'S');\r\n\tAttrInsert(cApplicationsDim, '', cBounceMode, 'S');\r\nElse;\r\n\t# fix tp_applications when upgraded from 9.5.2 server data.\r\n\tcAppAttrDim = '}ElementAttributes_' | cApplicationsDim;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionAttr, 'S');\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cAppAttrDim, cCubeViewsAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cCubeViewsAttr, 'S');\r\n\tEndIf;\r\n\r\n\t\r\n\tIf (DIMIX(cAppAttrDim, cMaintenanceAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cMaintenanceAttr, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApprovalShadowDimAttr) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApprovalShadowDimAttr, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesWrite) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesWrite, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesWriteOld) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesWriteOld, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesReadOld) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesReadOld, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cVersionSlicesRead) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cVersionSlicesRead, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim,  cVersionDimension) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '',  cVersionDimension, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim,  cVersionDimensionOld) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '',  cVersionDimensionOld, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApplicationType) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApplicationType, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cApplicationLastSavedTime) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cApplicationLastSavedTime, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cSecurityMethod) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cSecurityMethod, 'S');\r\n\tEndIf;\r\n\r\n\tIf (DIMIX(cAppAttrDim, cBounceMode) = 0);\r\n\t\tAttrInsert(cApplicationsDim, '', cBounceMode, 'S');\r\n\tEndIf;\r\nEndIf;\r\n\r\nIF (subsetExists(cApplicationsDim, 'Default') =0);\r\n\tSubsetCreate(cApplicationsDim, 'Default');\r\nEndif;\r\nSubsetIsAllSet(cApplicationsDim, 'Default', 1);\r\n\r\n#***\r\n\r\ncElementSecurityApplicationsCube = '}ElementSecurity_' | cApplicationsDim;\r\n\r\nsGroupsDim = '}Groups';\r\n\r\nIf (CubeExists(cElementSecurityApplicationsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create applications element security cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cElementSecurityApplicationsCube, cApplicationsDim, sGroupsDim);\r\n\tCubeSetLogChanges(cElementSecurityApplicationsCube, 1);\r\n\r\nEndIf;\r\n\r\n#***\r\n\r\ncElementAttributesApplicaitonsDim = '}ElementAttributes_' | cApplicationsDim;\r\ncElementAttributesApplicaitonsCube = cElementAttributesApplicaitonsDim;\r\nIf (DimensionExists(cElementAttributesApplicaitonsDim) = 0);\r\n    ProcessError;\r\nEndIf;\r\n\r\nIf (CubeExists(cElementAttributesApplicaitonsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create applications element attributes cube');\r\n\tEndIf;\r\n      \r\n   \tCubeCreate(cElementAttributesApplicaitonsCube, cApplicationsDim, cElementAttributesApplicaitonsDim);\r\n\tCubeSetLogChanges(cElementAttributesApplicaitonsCube, 1);\r\nEndIf;\r\n\r\n#***\r\n\r\ncPermissionsDim = cControlPrefix | 'tp_permissions';\r\n\r\ncView = 'VIEW';\r\ncAnnotate = 'ANNOTATE';\r\ncEdit = 'EDIT';\r\ncReject = 'REJECT';\r\ncSubmit = 'SUBMIT';\r\n\r\nIf (DimensionExists(cPermissionsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create permissions dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cPermissionsDim);\r\n\t\r\n\tDimensionElementInsert(cPermissionsDim, '',cView,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cAnnotate,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cEdit,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cReject,'S');\r\n\tDimensionElementInsert(cPermissionsDim, '',cSubmit,'S');\r\n\t\r\n\tSubsetCreate(cPermissionsDim, 'Default');\r\n\tSubsetIsAllSet(cPermissionsDim, 'Default', 1);\r\n\r\nEndIf;\r\n\r\n\r\n#***\r\n\r\ncNodeInfoDim = cControlPrefix | 'tp_node_info';\r\n\r\ncState = 'State';\r\ncViewed = 'Viewed';\r\ncSaved = 'Saved';\r\ncReviewed = 'Reviewed';\r\ncBeingEdited = 'BeingEdited';\r\ncOffline = 'Offline';\r\ncCurrentOwner = 'CurrentOwner';\r\ncCurrentOwnerId = 'CurrentOwnerId';\r\ncTakeOwnershipNode = 'TakeOwnershipNode';\r\ncStartEditingDate = 'StartEditingDate';\r\ncStateChangeUser = 'StateChangeUser';\r\ncStateChangeDate = 'StateChangeDate';\r\ncDataChangeUser = 'DataChangeUser';\r\ncDataChangeDate = 'DataChangeDate';\r\ncNodeInfoReviewer = 'Reviewer';\r\ncAddedNodeInfoReviewer = 'N';\r\n\r\nIf (DimensionExists(cNodeInfoDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create node info dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cNodeInfoDim);\r\n\t\r\n\tDimensionElementInsert(cNodeInfoDim, '', cState, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cViewed, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cSaved, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cReviewed, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cBeingEdited, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cOffline, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cCurrentOwner, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cCurrentOwnerId, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cNodeInfoReviewer, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cTakeOwnershipNode, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cStartEditingDate, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cStateChangeUser, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cStateChangeDate, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cDataChangeUser, 'S');\r\n\tDimensionElementInsert(cNodeInfoDim, '', cDataChangeDate, 'S');\r\nElse;\r\n\t# fix tp_node_info when upgraded from 9.5.2 server data.\r\n\tcTakeOwnershipNode = 'TakeOwnershipNode';\r\n\tcStartEditingDate = 'StartEditingDate';\r\n\tIf (DIMIX(cNodeInfoDim, cTakeOwnershipNode) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cStartEditingDate, cTakeOwnershipNode, 'S');\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cOffline) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cCurrentOwner, cOffline, 'S');\r\n\tEndIf;\r\n\t\r\n\tcAnnotationChangeUser = 'AnnotationChangeUser';\r\n\tcAnnotationChangeDate = 'AnnotationChangeDate';\r\n\tIf (DIMIX(cNodeInfoDim, cAnnotationChangeUser) <> 0);\r\n\t\tDimensionElementDelete(cNodeInfoDim, cAnnotationChangeUser);\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cAnnotationChangeDate) <> 0);\r\n\t\tDimensionElementDelete(cNodeInfoDim, cAnnotationChangeDate);\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cNodeInfoReviewer) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cTakeOwnershipNode, cNodeInfoReviewer, 'S');\r\n\t\tcAddedNodeInfoReviewer = 'Y';\r\n\tEndIf;\r\n\t\r\n\tIf (DIMIX(cNodeInfoDim, cCurrentOwnerId) = 0);\r\n\t\tDimensionElementInsert(cNodeInfoDim, cNodeInfoReviewer, cCurrentOwnerId, 'S');\r\n\tEndIf;\r\n\t\r\nEndIf;\r\n\r\n\r\n\r\n#*** Create subset for dimension }Groups\r\n\r\ncTpDefaultSubset = 'tp_default';\r\nIf (SubsetExists('}Groups', cTpDefaultSubset) = 0);\r\n\tSubsetCreate('}Groups', cTpDefaultSubset);\r\n\tSubsetIsAllSet('}Groups', cTpDefaultSubset, 1);\r\n\tSubsetAliasSet('}Groups', cTpDefaultSubset, '}TM1_DefaultDisplayValue');\r\nEndIf;\r\n\r\n#*** create applicationCubes cube\r\n\r\ncApplicationCubesCube = cControlPrefix | 'tp_application_cubes';\r\n\r\nsCubesDim = '}Cubes';\r\n\r\nIf (CubeExists(cApplicationCubesCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create application cubes cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cApplicationCubesCube, cApplicationsDim, sCubesDim);\r\n\tCubeSetLogChanges(cApplicationCubesCube, 1);\r\n\r\nEndIf;\r\n\r\n#*** create cube to store state of central applications \r\n\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\nIf (CubeExists(cCentralApplicationStateCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create central application state cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cCentralApplicationStateCube, cApplicationsDim, cNodeInfoDim);\r\n\tCubeSetLogChanges(cCentralApplicationStateCube, 1);\r\n\r\nEndIf;\r\n\r\n#***create objects for storing intermediate security information (rule driven)\r\nvIntermediateSecurityMeasureDim  ='}tp_intermediate_security_measures';\r\n\r\n\r\nIf (DimensionExists(vIntermediateSecurityMeasureDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create Intermediate security measure dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(vIntermediateSecurityMeasureDim);\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'StaticRights','S');\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'Rights','S');\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'WriteCount','N');\r\n\tDimensionElementInsert(vIntermediateSecurityMeasureDim, '', 'ReadCount','N');\r\nEndif;\r\n\r\n\r\nvIntermediateSecurityApplications = '}tp_intermediate_security_applications';\r\nIf (DimensionExists(vIntermediateSecurityApplications) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create Intermediate security applications dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(vIntermediateSecurityApplications);\r\n\tDimensionElementInsert(vIntermediateSecurityApplications, '', 'all_applications','C');\r\nEndif;\r\n\r\n#create objects to store workflow action pre and post TI\r\n# create dimension }tp_workflow_action_TI_measures\r\nvActionTIDimension = '}tp_workflow_action_TI_measures';\r\nIF (DimensionExists(vActionTIDimension) =0);\r\n\tvMeasurePreTI = 'PreActionTI';\r\n\tvMeasurePreTIEnabled = 'PreActionTIEnabled';\r\n\tvMeasurePostTI = 'PostActionTI';\r\n\tvMeasurePostTIEnabled = 'PostActionTIEnabled';\r\n\r\n\tDimensionCreate(vActionTIDimension);\r\n\tDimensionElementInsert(vActionTIDimension, '', vMeasurePreTI, 'S');\r\n\tDimensionElementInsert(vActionTIDimension, '', vMeasurePreTIEnabled, 'S');\r\n\tDimensionElementInsert(vActionTIDimension, '',  vMeasurePostTI, 'S');\r\n\tDimensionElementInsert(vActionTIDimension,'', vMeasurePostTIEnabled , 'S');\r\nEndif;\r\n\r\nvActionTypeDimension = '}tp_workflow_actions';\r\nIF (DimensionExists(vActionTypeDimension) =0);\r\n\tvEnter = 'ENTER';\r\n\tvOwn = 'OWN';\r\n\tvSave = 'SAVE';\r\n\tvSubmit = 'SUBMIT'; \r\n\tvReject = 'REJECT';\r\n\tvLeave = 'LEAVE';\r\n\tvSubmitChildren = 'SUBMITCHILDREN';\r\n\tvAnnotate = 'ANNOTATE';\r\n\tvRelease = 'RELEASE';\r\n\tvOffline = 'OFFLINE';\r\n\tvOnline = 'ONLINE';\r\n\tDimensionCreate(vActionTypeDimension);\r\n\tDimensionElementInsert(vActionTypeDimension, '', vEnter, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vOwn, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vSave, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vSubmit, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vReject, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vLeave, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vSubmitChildren, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vAnnotate, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vRelease, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vOffline, 'N');\r\n\tDimensionElementInsert(vActionTypeDimension, '', vOnline, 'N');\r\nEndif;\r\n\r\n#Create a cube to store workflow action pre-TI and post-TI\r\nvApplicationsDimension = '}tp_applications';\r\nvWorkflowActionTICube = '}tp_workflow_action_TI';\r\n\r\nIF (CubeExists(vWorkflowActionTICube) =0);\r\n\tCubeCreate(vWorkflowActionTICube, vApplicationsDimension, vActionTypeDimension,vActionTIDimension);\r\nEndif;\r\n\r\n#Create a dimension to store action TI error codes\r\n#Use dimension attributes for localized strings\r\nvActionTIErrorDim = '}tp_process_errors_localization';\r\nvActionTIErrorAttrDim ='}ElementAttributes_' | vActionTIErrorDim;\r\nvActionTIErrorAttrCube = vActionTIErrorAttrDim;\r\nIF (DimensionExists(vActionTIErrorDim) = 0);\r\n\tDimensionCreate(vActionTIErrorDim);\r\n\r\nEndif;\r\n\r\ncAttrErrorType = 'ErrorType';\r\nIF (DIMIX(vActionTIErrorAttrDim, cAttrErrorType) =0);\r\nAttrInsert(vActionTIErrorDim, '', cAttrErrorType, 'S');\r\nEndif;\r\n\r\n#***Create task navigation dimension\r\ncTaskNavDimension = '}tp_task_navigations';\r\ncNavElemField = 'NavigationElement';\r\nIF (DimensionExists( cTaskNavDimension) = 0);\r\n\tDimensionCreate( cTaskNavDimension);\r\n\tDimensionElementInsert( cTaskNavDimension, '',cNavElemField , 'S');\r\nEndif;\r\n\r\n\r\n#*** No error\r\n\r\ncRootPermissionsDim = cControlPrefix | 'tp_root_permissions';\r\n\r\ncOffline = 'OFFLINE';\r\ncOwnership = 'OWN';\r\n\r\nIf (DimensionExists(cRootPermissionsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create root permissions dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cRootPermissionsDim);\r\n\t\r\n\tDimensionElementInsert(cRootPermissionsDim, '',cOffline,'S');\r\n\tDimensionElementInsert(cRootPermissionsDim, '', cOwnership, 'S');\r\n\t\r\n\tSubsetCreate(cRootPermissionsDim, 'Default');\r\n\tSubsetIsAllSet(cRootPermissionsDim, 'Default', 1);\r\nElse;\r\n\tIf (DIMIX(cRootPermissionsDim, cOffline) = 0);\r\n\t\tDimensionElementInsert(cRootPermissionsDim, '', cOffline, 'S');\r\n\tEndIf;\r\n\tIf (DIMIX(cRootPermissionsDim, cOwnership) = 0);\r\n\t\tDimensionElementInsert(cRootPermissionsDim, '', cOwnership, 'S');\r\n\tEndIf;\r\nEndIf;\r\n\r\ncRootPermissionsCube = cControlPrefix | 'tp_application_root_permissions';\r\ncCellSecurityRootPermissionsCube = '}CellSecurity_' | cRootPermissionsCube;\r\n\r\nIf (CubeExists(cRootPermissionsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create application root permissions');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cRootPermissionsCube, cApplicationsDim, cRootPermissionsDim);\r\n\tCubeSetLogChanges(cRootPermissionsCube, 1);\r\n\t\r\nEndIf;\r\n\r\nIf (CubeExists(cCellSecurityRootPermissionsCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, TIMST(NOW, '\\Y-\\m-\\d \\h:\\i:\\s'), 'Create application root permissions cell security cube: ' | cCellSecurityRootPermissionsCube);\r\n\tEndIf;\r\n\r\n\tCubeCreate(cCellSecurityRootPermissionsCube, cApplicationsDim, cRootPermissionsDim, '}Groups');\r\n\tCubeSetLogChanges(cCellSecurityRootPermissionsCube, 1);\r\nEndIf;\r\n\r\n#***\r\n\r\ncJobsDim = cControlPrefix | 'tp_jobs';\r\n\r\nIf (DimensionExists(cJobsDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create jobs dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cJobsDim);\r\nEndIf;\r\n\r\n#***\r\n\r\ncJobInfoDim = cControlPrefix | 'tp_job_info';\r\n\r\ncJobAppId = 'ApplicationId';\r\ncJobAppName = 'ApplicationName';\r\ncJobType = 'JobType';\r\ncJobOwner = 'Owner';\r\ncJobOwnerId = 'OwnerId';\r\ncJobStartDate = 'StartDate';\r\ncJobEndDate = 'EndDate';\r\ncJobStatus = 'JobStatus';\r\n\r\nIf (DimensionExists(cJobInfoDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create job info dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cJobInfoDim);\r\n\t\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobAppId, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobAppName, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobType, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobOwner, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobOwnerId, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobStartDate, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobEndDate, 'S');\r\n\tDimensionElementInsert(cJobInfoDim, '', cJobStatus, 'S');\r\nEndIf;\r\n\r\n#*** create cube to store application jobs \r\n\r\ncApplicationJobCube = cControlPrefix | 'tp_application_jobs';\r\nIf (CubeExists(cApplicationJobCube) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create application jobs cube');\r\n\tEndIf;\r\n\r\n\tCubeCreate(cApplicationJobCube, cJobsDim, cJobInfoDim);\r\n\tCubeSetLogChanges(cApplicationJobCube, 1);\r\n\r\nEndIf;\r\n\r\ncApplicationUserPreferencesDim = cControlPrefix | 'tp_app_user_preference';\r\ncWorkflowLayout = 'WorkflowLayout';\r\nIf (DimensionExists(cApplicationUserPreferencesDim) = 0);\r\n\r\n\tIf (cGenerateLog @= 'Y');\r\n\t\tTextOutput(cTM1Log, 'Create user app preference dimension');\r\n\tEndIf;\r\n\r\n\tDimensionCreate(cApplicationUserPreferencesDim);\r\n\t\r\n\tDimensionElementInsert(cApplicationUserPreferencesDim, '', cWorkflowLayout, 'S');\r\nElse;\r\n\tIf (DIMIX(cApplicationUserPreferencesDim,cWorkflowLayout) = 0);\r\n\t\tDimensionElementInsert(cApplicationUserPreferencesDim, '', cWorkflowLayout, 'S');\r\n\tEndIf;\r\nEndIf;\r\n\r\ncApplicationUserPreferencesCube = cControlPrefix | 'tp_app_user_preferences';\r\nIf (CubeExists(cApplicationUserPreferencesCube) = 0);\r\n\tCubeCreate(cApplicationUserPreferencesCube, '}Clients', cApplicationsDim, cApplicationUserPreferencesDim);\r\nEndIf;\r\n\r\n\r\nIf (cGenerateLog @= 'Y');\r\n\tTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "MetadataProcedure": "",
    "DataProcedure": "",
    "EpilogProcedure": "\r\n\r\n#################################################################\r\n## IBM Confidential\r\n##\r\n## OCO Source Materials\r\n##\r\n## BI and PM: pmpsvc\r\n##\r\n## (C) Copyright IBM Corp. 2008, 2009, 2010\r\n##\r\n## The source code for this program is not published or otherwise\r\n## divested of its trade secrets, irrespective of what has been\r\n## deposited with the U.S. Copyright Office.\r\n#################################################################\r\n\r\n\r\n#*** Log File Name\r\ncTM1Log = cEpilogLog;\r\n\r\n#***By default enforce element security on approval dimension\r\nIF (vIsInitialSetup @= 'Y');\r\nAttrPutS('Y', cConfigDim, cEnableElementSecurity, 'String Value');\r\nEndif;\r\n\r\n#*** Check security cubes\r\n\r\nsDimensionsDim = '}Dimensions';\r\nsDimensionSecurityCube = '}DimensionSecurity';\r\nIf (CubeExists(sDimensionSecurityCube) = 0);\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Create }DimensionSecurity');\r\nEndIf;\r\n\r\nCubeCreate(sDimensionSecurityCube, sDimensionsDim, sGroupsDim);\r\nCubeSetLogChanges(sDimensionSecurityCube, 1);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, '}Groups', cEveryoneGroup); \r\nIf ( cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, '}Groups', cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT('((}Groups,',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvDetail=INSRT(CellGetS(sDimensionSecurityCube, '}Groups', cEveryoneGroup),vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, '}Groups', cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup); \r\nIf ( cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT('((}ElementAttributes_}Groups,',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\nsCubesDim = '}Cubes';\r\nsCubeSecurityCube = '}CubeSecurity';\r\nIf (CubeExists(sCubeSecurityCube) = 0);\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Create }CubeSecurity');\r\nEndIf;\r\n\r\nCubeCreate(sCubeSecurityCube, sCubesDim, sGroupsDim);\r\nCubeSetLogChanges(sCubeSecurityCube, 1);\r\nEndIf;\r\n\r\nCellPutS('Read', sCubeSecurityCube, '}ElementAttributes_}Groups', cEveryoneGroup);\r\nCellPutS('Read', sCubeSecurityCube, cElementSecurityApplicationsCube, cEveryoneGroup);\r\n\r\nsProcessesDim = '}Processes';\r\nsProcessSecurityCube = '}ProcessSecurity';\r\nIf (CubeExists(sProcessSecurityCube) = 0);\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Create }ProcessSecurity');\r\nEndIf;\r\n\r\nCubeCreate(sProcessSecurityCube, sProcessesDim, sGroupsDim);\r\nCubeSetLogChanges(sProcessSecurityCube, 1);\r\nEndIf;\r\n\r\n#*** Add TP processes to everyone group\r\n\r\ncEnterNodeProc = cControlPrefix | 'tp_workflow_enter_node';\r\ncLeaveNodeProc = cControlPrefix | 'tp_workflow_leave_node';\r\ncOwnNodeProc = cControlPrefix | 'tp_workflow_own_node';\r\ncRejectNodeProc = cControlPrefix | 'tp_workflow_reject_node';\r\ncSaveNodeProc = cControlPrefix | 'tp_workflow_save_node';\r\ncSubmitNodeProc = cControlPrefix | 'tp_workflow_submit_node';\r\ncSubmitLeafChildrenProc = cControlPrefix | 'tp_workflow_submit_leaf_children';\r\ncUpdateUserNameProc = cControlPrefix | 'tp_workflow_update_user_name';\r\ncInitializeSessionProc = cControlPrefix | 'tp_initialize_session';\r\ncExecuteActionProc = cControlPrefix | 'tp_workflow_execute_action';\r\ncBounceConflictUsersProc = cControlPrefix | 'tp_workflow_bounce_conflict_users';\r\ncDeleteDrillViewProc = cControlPrefix | 'tp_delete_drill_view';\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cEnterNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cEnterNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cEnterNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cEnterNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cLeaveNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cLeaveNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cLeaveNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cLeaveNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cOwnNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cOwnNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cOwnNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cOwnNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cRejectNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cRejectNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cRejectNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cRejectNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSaveNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSaveNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSaveNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSaveNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSubmitNodeProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSubmitNodeProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSubmitNodeProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSubmitNodeProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSubmitLeafChildrenProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSubmitLeafChildrenProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cUpdateUserNameProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cUpdateUserNameProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cUpdateUserNameProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cUpdateUserNameProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cInitializeSessionProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cInitializeSessionProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cInitializeSessionProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cInitializeSessionProc , cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cExecuteActionProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cExecuteActionProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cExecuteActionProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cExecuteActionProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cBounceConflictUsersProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cBounceConflictUsersProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cBounceConflictUsersProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cBounceConflictUsersProc, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cDeleteDrillViewProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cDeleteDrillViewProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cDeleteDrillViewProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cDeleteDrillViewProc, cEveryoneGroup);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Add applications dimension, its attributes dimension and cube to everyone group');\r\nEndIf;\r\n\r\ncApplicationsAttributesDim = '}ElementAttributes_' | cApplicationsDim;\r\ncApplicationsAttributesCube = '}ElementAttributes_' | cApplicationsDim;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationsDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationsDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationsDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', sProcessSecurityCube,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationsDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationsAttributesDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationsAttributesDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationsAttributesDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationsAttributesDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationsAttributesCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvDetail=INSRT(CellGetS(sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup),vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cApplicationsAttributesCube, cEveryoneGroup);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Add permissions dimension to everyone group');\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cPermissionsDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cPermissionsDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cPermissionsDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cPermissionsDim, cEveryoneGroup);\r\nEndIf;\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Add node info dimension to everyone group');\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cNodeInfoDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cNodeInfoDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cNodeInfoDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cNodeInfoDim, cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\n#***\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'Set security on error cube');\r\nEndIf;\r\n\r\ncErrorCube = cControlPrefix | 'tp_process_errors';\r\ncErrorGuidsDim = cControlPrefix |  'tp_process_guids';\r\ncErrorMeasuresDim = cControlPrefix | 'tp_process_error_measures';\r\ncCentralApplicationStateCube = cControlPrefix | 'tp_central_application_state';\r\ncApplicationRootPermissionsCube = cControlPrefix | 'tp_application_root_permissions';\r\ncApplicationRootPermissionsDimension = cControlPrefix | 'tp_root_permissions';\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cErrorGuidsDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cErrorGuidsDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cErrorGuidsDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cErrorGuidsDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cErrorMeasuresDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cErrorMeasuresDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cErrorMeasuresDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cErrorMeasuresDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cErrorCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cErrorCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cErrorCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cErrorCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cCentralApplicationStateCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cCentralApplicationStateCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cCentralApplicationStateCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cCentralApplicationStateCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTIDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTIDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTIDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTypeDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTypeDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTypeDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTypeDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, vWorkflowActionTICube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube,vWorkflowActionTICube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vWorkflowActionTICube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, vWorkflowActionTICube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTIErrorDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTIErrorDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIErrorDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTIErrorDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, vActionTIErrorAttrDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, vActionTIErrorAttrDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIErrorAttrDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, vActionTIErrorAttrDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, vActionTIErrorAttrCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, vActionTIErrorAttrCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(vActionTIErrorAttrCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, vActionTIErrorAttrCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cApplicationRootPermissionsCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cApplicationRootPermissionsCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationRootPermissionsCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sCubeSecurityCube, cApplicationRootPermissionsCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationRootPermissionsDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationRootPermissionsDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationRootPermissionsDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationRootPermissionsDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cTaskNavDimension, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cTaskNavDimension, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cTaskNavDimension,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cTaskNavDimension, cEveryoneGroup);\r\nEndIf;\r\n\r\ncurrentMaintenanceValue = ATTRS(cConfigDim, cServerMaintenanceRunning, 'StringValue');\r\nIf(currentMaintenanceValue @= '');\r\n\tAttrPutS('N', cConfigDim, cServerMaintenanceRunning, 'StringValue');\r\nEndIf;\r\n\r\nIf (cAddedNodeInfoReviewer @= 'Y');\r\n\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_set_state_reviewers_all',\r\n\t\t'pExecutionId', pExecutionId, 'pControl', pControl);\r\n\tIf (vReturnValue <> ProcessExitNormal());\r\n\t\tProcessError;\r\n\tEndIf;\r\nEndIf;\r\n\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, '}Clients', cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, '}Clients', cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT('}Clients',vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, '}Clients', cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sDimensionSecurityCube, cApplicationUserPreferencesDim, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sDimensionSecurityCube, cApplicationUserPreferencesDim, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationUserPreferencesDim,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sDimensionSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sDimensionSecurityCube, cApplicationUserPreferencesDim, cEveryoneGroup);\r\nEndIf;\r\n\r\ncCurrentCellValue = CellGetS(sCubeSecurityCube, cApplicationUserPreferencesCube, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sCubeSecurityCube, cApplicationUserPreferencesCube, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cApplicationUserPreferencesCube,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sCubeSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Write', sCubeSecurityCube, cApplicationUserPreferencesCube, cEveryoneGroup);\r\nEndIf;\r\n\r\ncSetApplicationUserPreferenceProc = cControlPrefix | 'tp_set_app_user_preference';\r\ncCurrentCellValue = CellGetS(sProcessSecurityCube, cSetApplicationUserPreferenceProc, cEveryoneGroup); \r\nIf (cCurrentCellValue @= '' % cCurrentCellValue @= 'NONE');\r\n\tIf (CellIsUpdateable(sProcessSecurityCube, cSetApplicationUserPreferenceProc, cEveryoneGroup) = 0);\r\n\t\tvDetail=INSRT(cEveryoneGroup,')',1);\r\n\t\tvDetail=INSRT(',',vDetail,1);\r\n\t\tvDetail=INSRT(cSetApplicationUserPreferenceProc,vDetail,1);\r\n\t\tvDetail=INSRT('(',vDetail,1);\r\n\t\tvDetail=INSRT(sProcessSecurityCube,vDetail,1);\r\n\t\tvReturnValue = ExecuteProcess(cControlPrefix | 'tp_error_update_error_cube', \r\n\t\t'pGuid', pExecutionId, \r\n\t\t'pProcess', cTM1Process, \r\n\t\t'pErrorCode', 'TI_SECURITY_NOT_UPDATEABLE',\r\n\t\t'pErrorDetails', vDetail,\r\n\t\t'pControl', pControl);\r\n\t\tProcessError;\r\n\tEndIf;\r\n\tCellPutS('Read', sProcessSecurityCube, cSetApplicationUserPreferenceProc, cEveryoneGroup);\r\nEndIf;\r\n\r\n\r\n\r\n\r\n\r\n\r\n#*** No error\r\n\r\nIf (cGenerateLog @= 'Y');\r\nTextOutput(cTM1Log, 'The end has been reached.');\r\nEndIf;\r\n",
    "DataSource": {
        "Type": "None"
    },
    "Parameters": [
        {
            "Name": "pExecutionId",
            "Prompt": "",
            "Value": "None",
            "Type": "String"
        },
        {
            "Name": "pControl",
            "Prompt": "",
            "Value": "N",
            "Type": "String"
        }
    ],
    "Variables": [],
    "Attributes": {
        "Caption": "}tp_create_planning_artifacts"
    }
}